{
  "name": "src",
  "type": "directory",
  "children": [
    {
      "name": "actions",
      "type": "directory",
      "children": [
        {
          "name": "auth.ts",
          "type": "file",
          "content": "'use server';\n\nimport { z } from 'zod';\nimport bcrypt from 'bcryptjs';\nimport { redirect } from 'next/navigation';\n\nimport prisma from '@/lib/prisma';\nimport { createSession, deleteSession } from '@/lib/session';\n\n// @BestPractice: Use .trim() to remove leading/trailing whitespace from user input.\nconst registerSchema = z.object({\n  username: z.string().trim().min(3, { message: \"El nombre de usuario debe tener al menos 3 caracteres.\" }),\n  email: z.string().trim().email({ message: \"Por favor, introduce un correo electr\u00f3nico v\u00e1lido.\" }),\n  password: z.string().min(8, { message: \"La contrase\u00f1a debe tener al menos 8 caracteres.\" }),\n});\n\nconst loginSchema = z.object({\n  email: z.string().email({ message: \"Por favor, introduce un correo electr\u00f3nico v\u00e1lido.\" }),\n  password: z.string().min(1, { message: \"La contrase\u00f1a es obligatoria.\" }),\n});\n\nconst forgotPasswordSchema = z.object({\n    email: z.string().email(),\n});\n\n\nexport async function registerUser(values: z.infer<typeof registerSchema>): Promise<{ success: true; } | { error: string; }> {\n  const validatedFields = registerSchema.safeParse(values);\n\n  if (!validatedFields.success) {\n    return { error: 'Campos inv\u00e1lidos.' };\n  }\n\n  const { username, email, password } = validatedFields.data;\n  \n  // @Security: Hash the password securely using bcrypt before storing it.\n  const hashedPassword = await bcrypt.hash(password, 10);\n\n  const existingUserByEmail = await prisma.user.findUnique({\n    where: { email },\n  });\n\n  if (existingUserByEmail) {\n    return { error: 'El correo electr\u00f3nico ya est\u00e1 en uso.' };\n  }\n\n  const existingUserByUsername = await prisma.user.findUnique({\n    where: { usuario: username },\n  });\n  \n  if (existingUserByUsername) {\n    return { error: 'El nombre de usuario ya est\u00e1 en uso.' };\n  }\n\n  const newUser = await prisma.user.create({\n    data: {\n      usuario: username,\n      email: email,\n      pass: hashedPassword,\n      idioma: 'es',\n    },\n  });\n\n  // @Security: After successful registration, create a session for the user immediately.\n  // This avoids passing sensitive info like userId in URL params.\n  await createSession({ userId: newUser.id_usuario });\n\n  return { success: true };\n}\n\n\nexport async function loginUser(values: z.infer<typeof loginSchema>): Promise<{ error: string } | { success: true; redirectTo: string; }> {\n    try {\n        const validatedFields = loginSchema.safeParse(values);\n\n        if (!validatedFields.success) {\n            return { error: \"Datos de inicio de sesi\u00f3n inv\u00e1lidos.\" };\n        }\n\n        const { email, password } = validatedFields.data;\n\n        const user = await prisma.user.findUnique({\n            where: { email },\n        });\n\n        if (!user) {\n            // @Security: Use a generic error message to prevent email enumeration.\n            return { error: \"El correo electr\u00f3nico o la contrase\u00f1a son incorrectos.\" };\n        }\n        \n        const passwordsMatch = await bcrypt.compare(password, user.pass);\n\n        if (!passwordsMatch) {\n             // @Security: Use a generic error message.\n            return { error: \"El correo electr\u00f3nico o la contrase\u00f1a son incorrectos.\" };\n        }\n        \n        await createSession({ userId: user.id_usuario });\n\n        // @BestPractice: Check if the user has completed the registration flow by checking for a profile.\n        const profile = await prisma.playerProfile.findUnique({\n            where: { id_usuario: user.id_usuario },\n        });\n\n        if (!profile) {\n            // If registration is incomplete, return the redirect path for the client to handle.\n            return { success: true, redirectTo: '/register/create-property' };\n        }\n        \n        // On full success, return the redirect path for the client to handle.\n        return { success: true, redirectTo: '/dashboard' };\n\n    } catch (error: any) {\n        // Log the unexpected error for debugging purposes on the server.\n        console.error(\"Error inesperado durante el inicio de sesi\u00f3n:\", error);\n        \n        // Return a generic, user-friendly error message.\n        return { error: \"Ocurri\u00f3 un error inesperado. Por favor, int\u00e9ntalo de nuevo m\u00e1s tarde.\" };\n    }\n}\n\nexport async function sendPasswordResetLink(values: z.infer<typeof forgotPasswordSchema>) {\n    const validatedFields = forgotPasswordSchema.safeParse(values);\n\n    if (!validatedFields.success) {\n        return { error: \"Correo electr\u00f3nico inv\u00e1lido.\" };\n    }\n    const { email } = validatedFields.data;\n    \n    const user = await prisma.user.findUnique({ where: { email } });\n\n    // @Security: To prevent user enumeration, always return a generic success message\n    // regardless of whether the user exists or not.\n    if (!user) {\n        return { success: \"Si existe una cuenta con ese correo, se ha enviado un enlace para restablecer la contrase\u00f1a.\"};\n    }\n\n    // In a real application, here you would generate a secure, single-use token,\n    // save its hash to the database with an expiration, and email the user a link.\n    console.log(`Password reset link for ${email} would be sent here.`);\n\n    return { success: \"Si existe una cuenta con ese correo, se ha enviado un enlace para restablecer la contrase\u00f1a.\"};\n}\n\n\nexport async function logoutUser() {\n  // @Security: This server action securely deletes the session cookie.\n  await deleteSession();\n  // @BestPractice: Redirect the user to the login page after destroying the session.\n  redirect('/login');\n}\n"
        },
        {
          "name": "buildings.ts",
          "type": "file",
          "content": "'use server';\n\nimport { z } from 'zod';\nimport prisma from '@/lib/prisma';\nimport { protectAction } from '@/lib/auth';\nimport { revalidatePath } from 'next/cache';\nimport { buildingFieldMap } from '@/lib/constants';\n\n// Schema to validate the input for upgrading a building.\nconst upgradeBuildingSchema = z.object({\n  id_edificio: z.number().int().positive(),\n});\n\n/**\n * Server Action to handle the logic of upgrading a building.\n * @param values Object containing the building ID.\n * @returns A success or error object.\n */\nexport async function upgradeBuilding(\n  values: z.infer<typeof upgradeBuildingSchema>\n): Promise<{ success?: string; error?: string }> {\n  // 1. Authenticate the user and ensure all necessary data is available.\n  const user = await protectAction();\n  if (!user.perfil || !user.recursos || !user.propiedades?.[0]) {\n    return { error: 'Datos del jugador incompletos. No se puede proceder con la mejora.' };\n  }\n  const property = user.propiedades[0];\n\n  // 2. Validate the incoming building ID.\n  const validatedFields = upgradeBuildingSchema.safeParse(values);\n  if (!validatedFields.success) {\n    return { error: 'El ID del edificio proporcionado es inv\u00e1lido.' };\n  }\n  const { id_edificio } = validatedFields.data;\n\n  // 3. Fetch building details from the catalog.\n  const building = await prisma.building.findUnique({ where: { id_edificio } });\n  if (!building) {\n    return { error: 'El edificio especificado no existe en el cat\u00e1logo del juego.' };\n  }\n\n  // 4. Determine the specific field in the property model to update.\n  const buildingKey = buildingFieldMap[building.nombre];\n  if (!buildingKey) {\n    return { error: 'La configuraci\u00f3n para este tipo de edificio no fue encontrada.' };\n  }\n\n  // 5. Calculate the cost for the next level upgrade.\n  const currentLevel = property[buildingKey] as number;\n  const costFactor = Math.pow(building.fac_costo, currentLevel);\n  const cost = {\n    armas: BigInt(Math.floor(building.c_armas * costFactor)),\n    municion: BigInt(Math.floor(building.c_municion * costFactor)),\n    alcohol: BigInt(Math.floor(building.c_alcohol * costFactor)),\n    dolares: BigInt(Math.floor(building.c_dolares * costFactor)),\n  };\n\n  // 6. Verify if the player has enough resources.\n  if (\n    user.recursos.armas < cost.armas ||\n    user.recursos.municion < cost.municion ||\n    user.recursos.alcohol < cost.alcohol ||\n    user.recursos.dolares < cost.dolares\n  ) {\n    return { error: 'No tienes suficientes recursos para realizar esta mejora.' };\n  }\n\n  // 7. Calculate the points awarded for this upgrade.\n  const totalResourceCost = cost.armas + cost.municion + cost.alcohol + cost.dolares;\n  const pointsToAdd = totalResourceCost > 0 ? totalResourceCost / 1000n : 0n;\n\n  // 8. Execute the upgrade within a database transaction for atomicity.\n  try {\n    await prisma.$transaction(async (tx) => {\n      // Decrement player resources.\n      await tx.playerResources.update({\n        where: { id_usuario: user.id_usuario },\n        data: {\n          armas: { decrement: cost.armas },\n          municion: { decrement: cost.municion },\n          alcohol: { decrement: cost.alcohol },\n          dolares: { decrement: cost.dolares },\n        },\n      });\n\n      // Increment the building level.\n      await tx.propiedad.update({\n        where: { id_propiedad: property.id_propiedad },\n        data: { [buildingKey]: { increment: 1 } },\n      });\n\n      // Increment player's building points.\n      if (pointsToAdd > 0) {\n        await tx.playerProfile.update({\n          where: { id_perfil: user.perfil!.id_perfil },\n          data: { puntos_edificios: { increment: Number(pointsToAdd) } },\n        });\n      }\n    });\n  } catch (error) {\n    console.error('Error durante la transacci\u00f3n de mejora de edificio:', error);\n    return { error: 'Ocurri\u00f3 un error inesperado al procesar la mejora.' };\n  }\n\n  // 9. Revalidate paths to update the UI and return success.\n  revalidatePath('/dashboard/rooms');\n  revalidatePath('/dashboard');\n  return { success: `\u00a1'${building.nombre}' mejorado al nivel ${currentLevel + 1}!` };\n}\n"
        },
        {
          "name": "property.ts",
          "type": "file",
          "content": "'use server';\n\nimport { z } from 'zod';\nimport prisma from '@/lib/prisma';\nimport { protectAction } from '@/lib/auth';\nimport { redirect } from 'next/navigation';\n\n// @BestPractice: Use .pipe() for complex validation, first ensuring the value is a\n// string, then coercing to a number for range checks.\nconst createPropertySchema = z.object({\n  name: z.string().trim().min(1, { message: 'El nombre de la propiedad es requerido.' }),\n  coordX: z.string().min(1, { message: \"La coordenada X es requerida.\"}).pipe(\n    z.coerce.number({invalid_type_error: \"Debe ser un n\u00famero\"})\n    .int()\n    .min(1, { message: \"Rango: 1-50\" })\n    .max(50, { message: \"Rango: 1-50\" })\n  ),\n  coordY: z.string().min(1, { message: \"La coordenada Y es requerida.\"}).pipe(\n    z.coerce.number({invalid_type_error: \"Debe ser un n\u00famero\"})\n    .int()\n    .min(1, { message: \"Rango: 1-50\" })\n    .max(50, { message: \"Rango: 1-50\" })\n  ),\n  coordZ: z.string().min(1, { message: \"El Sector Z es requerido.\"}).pipe(\n    z.coerce.number({invalid_type_error: \"Debe ser un n\u00famero\"})\n    .int()\n    .min(1, { message: \"Rango: 1-255\" })\n    .max(255, { message: \"Rango: 1-255\" })\n  ),\n});\n\n// @Fix: The function argument should be typed with z.input<> to represent the raw\n// data before parsing, not z.infer<> which is the output type.\nexport async function createInitialProperty(values: z.input<typeof createPropertySchema>) {\n  // @Security: Protect this action by ensuring a user is authenticated.\n  // This is crucial because this action performs database writes.\n  const user = await protectAction();\n  const userId = user.id_usuario;\n  \n  const validatedFields = createPropertySchema.safeParse(values);\n\n  if (!validatedFields.success) {\n    return { error: 'Datos inv\u00e1lidos.' };\n  }\n  \n  const { name, coordX, coordY, coordZ } = validatedFields.data;\n  \n  const existingProfile = await prisma.playerProfile.findUnique({\n      where: { id_usuario: userId }\n  });\n\n  if (existingProfile) {\n      return { error: 'Este usuario ya tiene una propiedad.' };\n  }\n\n  // @Security: Check for coordinate collision to prevent multiple properties in the same location.\n  const existingPropertyAtCoords = await prisma.propiedad.findUnique({\n    where: {\n      coord_x_coord_y_coord_z: {\n        coord_x: coordX,\n        coord_y: coordY,\n        coord_z: coordZ,\n      },\n    },\n  });\n\n  if (existingPropertyAtCoords) {\n    return { error: 'Las coordenadas seleccionadas ya est\u00e1n ocupadas.' };\n  }\n  \n  const allTrainings = await prisma.training.findMany({\n    select: { id_training: true },\n  });\n\n  // Calculate initial building points based on the base cost of all buildings.\n  const allBuildings = await prisma.building.findMany();\n  const initialResourceCost = allBuildings.reduce((total, building) => {\n    return total + building.c_armas + building.c_municion + building.c_alcohol + building.c_dolares;\n  }, 0);\n  // A common formula in such games: points = total resources spent / 1000\n  const initialBuildingPoints = Math.floor(initialResourceCost / 1000);\n\n  try {\n    // @BestPractice: Use an interactive transaction to ensure all related records \n    // (profile, trainings, property, resources) are created atomically.\n    await prisma.$transaction(async (tx) => {\n      const newProfile = await tx.playerProfile.create({\n        data: {\n          id_usuario: userId,\n          puntos_edificios: initialBuildingPoints,\n          puntos_entrenamiento: 0,\n          puntos_tropas: 0,\n          ranking_global: 0,\n          lealtad: 100,\n        }\n      });\n      \n      // @New: Initialize all trainings for the new player at level 0.\n      if (allTrainings.length > 0) {\n        await tx.playerTraining.createMany({\n            data: allTrainings.map(training => ({\n                id_perfil: newProfile.id_perfil,\n                id_training: training.id_training,\n                level: 0,\n            }))\n        });\n      }\n\n      await tx.propiedad.create({\n        data: {\n          id_usuario: userId,\n          nombre: name,\n          coord_x: coordX,\n          coord_y: coordY,\n          coord_z: coordZ,\n          oficina: 1,\n          escuela: 1,\n          armeria: 1,\n          municion: 1,\n          cerveceria: 1,\n          taberna: 1,\n          contrabando: 1,\n          almacenArm: 1,\n          deposito: 1,\n          almacenAlc: 1,\n          caja: 1,\n          campo: 1,\n          seguridad: 1,\n          torreta: 1,\n          minas: 1,\n        },\n      });\n      \n      await tx.playerResources.create({\n        data: {\n          id_usuario: userId,\n          armas: 500,\n          municion: 500,\n          alcohol: 0,\n          dolares: 0,\n        }\n      });\n    });\n  } catch (error) {\n    console.error(\"Error al crear la propiedad y el perfil:\", error);\n    return { error: 'No se pudo crear la propiedad. Int\u00e9ntalo de nuevo.' };\n  }\n  \n  // @BestPractice: Redirect must be called outside of a try/catch block.\n  // This ensures Next.js can properly handle the navigation.\n  redirect('/dashboard');\n}\n"
        },
        {
          "name": "recruitment.ts",
          "type": "file",
          "content": "'use server';\n\nimport { z } from 'zod';\nimport prisma from '@/lib/prisma';\nimport { protectAction } from '@/lib/auth';\nimport { revalidatePath } from 'next/cache';\n\n// Esquema para validar los datos de entrada del formulario de reclutamiento.\nconst recruitUnitSchema = z.object({\n  id_recruitment: z.number().int().positive(),\n  quantity: z.number().int().positive({ message: 'La cantidad debe ser mayor que cero.' }),\n});\n\n/**\n * Server Action para reclutar unidades.\n * @param values Objeto con id_recruitment y quantity.\n * @returns Un objeto de \u00e9xito o error.\n */\nexport async function recruitUnit(\n  values: z.infer<typeof recruitUnitSchema>\n): Promise<{ success?: string; error?: string }> {\n  // 1. Proteger la acci\u00f3n y obtener los datos del usuario autenticado.\n  const user = await protectAction();\n  if (!user.perfil) {\n    return { error: 'El perfil del jugador no fue encontrado.' };\n  }\n  const userResources = user.recursos;\n  if (!userResources) {\n      return { error: 'Recursos del jugador no encontrados.' };\n  }\n\n  // 2. Validar los datos de entrada con Zod.\n  const validatedFields = recruitUnitSchema.safeParse(values);\n  if (!validatedFields.success) {\n    return { error: 'Datos de entrada inv\u00e1lidos.' };\n  }\n  const { id_recruitment, quantity } = validatedFields.data;\n\n  // 3. Obtener los detalles de la unidad a reclutar.\n  const unitToRecruit = await prisma.recruitment.findUnique({\n    where: { id_recruitment },\n  });\n\n  if (!unitToRecruit) {\n    return { error: 'La unidad especificada no existe.' };\n  }\n\n  // 4. Calcular el costo total usando BigInt para evitar desbordamientos.\n  const totalCost = {\n    armas: BigInt(unitToRecruit.c_armas) * BigInt(quantity),\n    municion: BigInt(unitToRecruit.c_municion) * BigInt(quantity),\n    alcohol: BigInt(unitToRecruit.c_alcohol) * BigInt(quantity),\n    dolares: BigInt(unitToRecruit.c_dolares) * BigInt(quantity),\n  };\n\n  // 5. Verificar si el jugador tiene suficientes recursos.\n  if (userResources.armas < totalCost.armas) {\n    return { error: 'No tienes suficientes armas.' };\n  }\n  if (userResources.municion < totalCost.municion) {\n    return { error: 'No tienes suficiente munici\u00f3n.' };\n  }\n  if (userResources.alcohol < totalCost.alcohol) {\n    return { error: 'No tienes suficiente alcohol.' };\n  }\n  if (userResources.dolares < totalCost.dolares) {\n    return { error: 'No tienes suficientes d\u00f3lares.' };\n  }\n\n  // @New: Calculate the points to be awarded for recruiting these units.\n  const pointsToAdd = BigInt(unitToRecruit.puntos_por_nivel) * BigInt(quantity);\n\n  // 6. Ejecutar la actualizaci\u00f3n de la base de datos en una transacci\u00f3n at\u00f3mica.\n  try {\n    await prisma.$transaction(async (tx) => {\n      // Restar los recursos del jugador.\n      await tx.playerResources.update({\n        where: { id_usuario: user.id_usuario },\n        data: {\n          armas: { decrement: totalCost.armas },\n          municion: { decrement: totalCost.municion },\n          alcohol: { decrement: totalCost.alcohol },\n          dolares: { decrement: totalCost.dolares },\n        },\n      });\n\n      // A\u00f1adir o actualizar la cantidad de unidades del jugador.\n      await tx.playerRecruitment.upsert({\n        where: {\n          id_perfil_id_recruitment: {\n            id_perfil: user.perfil!.id_perfil,\n            id_recruitment: id_recruitment,\n          }\n        },\n        update: {\n          quantity: { increment: quantity },\n        },\n        create: {\n          id_perfil: user.perfil!.id_perfil,\n          id_recruitment: id_recruitment,\n          quantity: quantity,\n        },\n      });\n\n      // @New: Update player's troop points.\n      if (pointsToAdd > 0) {\n        await tx.playerProfile.update({\n            where: { id_perfil: user.perfil!.id_perfil },\n            data: { puntos_tropas: { increment: Number(pointsToAdd) } },\n        });\n      }\n    });\n  } catch (error) {\n    console.error('Error durante la transacci\u00f3n de reclutamiento:', error);\n    return { error: 'Ocurri\u00f3 un error al procesar el reclutamiento. Int\u00e9ntalo de nuevo.' };\n  }\n\n  // 7. Revalidar la ruta para que la UI se actualice y devolver \u00e9xito.\n  revalidatePath('/dashboard/recruitment');\n  revalidatePath('/dashboard');\n  return { success: `${quantity} ${unitToRecruit.nombre}(s) reclutado(s) exitosamente.` };\n}\n"
        },
        {
          "name": "security.ts",
          "type": "file",
          "content": "'use server';\n\nimport { z } from 'zod';\nimport prisma from '@/lib/prisma';\nimport { protectAction } from '@/lib/auth';\nimport { revalidatePath } from 'next/cache';\n\n// Schema to validate the input data from the security purchase form.\nconst purchaseSecuritySchema = z.object({\n  id_security: z.number().int().positive(),\n  quantity: z.number().int().positive({ message: 'La cantidad debe ser mayor que cero.' }),\n});\n\n/**\n * Server Action to purchase security units.\n * @param values Object with id_security and quantity.\n * @returns A success or error object.\n */\nexport async function purchaseSecurity(\n  values: z.infer<typeof purchaseSecuritySchema>\n): Promise<{ success?: string; error?: string }> {\n  // 1. Protect the action and get the authenticated user's data.\n  const user = await protectAction();\n  if (!user.perfil) {\n    return { error: 'El perfil del jugador no fue encontrado.' };\n  }\n  const userResources = user.recursos;\n  if (!userResources) {\n      return { error: 'Recursos del jugador no encontrados.' };\n  }\n\n  // 2. Validate the input data with Zod.\n  const validatedFields = purchaseSecuritySchema.safeParse(values);\n  if (!validatedFields.success) {\n    return { error: 'Datos de entrada inv\u00e1lidos.' };\n  }\n  const { id_security, quantity } = validatedFields.data;\n\n  // 3. Get the details of the security unit to purchase.\n  const unitToPurchase = await prisma.security.findUnique({\n    where: { id_security },\n  });\n\n  if (!unitToPurchase) {\n    return { error: 'La unidad de seguridad especificada no existe.' };\n  }\n\n  // 4. Calculate the total cost using BigInt to prevent overflows.\n  const totalCost = {\n    armas: BigInt(unitToPurchase.c_armas) * BigInt(quantity),\n    municion: BigInt(unitToPurchase.c_municion) * BigInt(quantity),\n    alcohol: BigInt(unitToPurchase.c_alcohol) * BigInt(quantity),\n    dolares: BigInt(unitToPurchase.c_dolares) * BigInt(quantity),\n  };\n\n  // 5. Check if the player has enough resources.\n  if (userResources.armas < totalCost.armas) {\n    return { error: 'No tienes suficientes armas.' };\n  }\n  if (userResources.municion < totalCost.municion) {\n    return { error: 'No tienes suficiente munici\u00f3n.' };\n  }\n  if (userResources.alcohol < totalCost.alcohol) {\n    return { error: 'No tienes suficiente alcohol.' };\n  }\n  if (userResources.dolares < totalCost.dolares) {\n    return { error: 'No tienes suficientes d\u00f3lares.' };\n  }\n\n  // @New: Calculate points to add. Security units contribute to 'puntos_tropas'.\n  const pointsToAdd = BigInt(unitToPurchase.puntos_por_nivel) * BigInt(quantity);\n\n  // 6. Execute the database update in an atomic transaction.\n  try {\n    await prisma.$transaction(async (tx) => {\n      // Subtract resources from the player.\n      await tx.playerResources.update({\n        where: { id_usuario: user.id_usuario },\n        data: {\n          armas: { decrement: totalCost.armas },\n          municion: { decrement: totalCost.municion },\n          alcohol: { decrement: totalCost.alcohol },\n          dolares: { decrement: totalCost.dolares },\n        },\n      });\n\n      // Add or update the quantity of the player's security units.\n      await tx.playerSecurity.upsert({\n        where: {\n          id_perfil_id_security: {\n            id_perfil: user.perfil!.id_perfil,\n            id_security: id_security,\n          }\n        },\n        update: {\n          quantity: { increment: quantity },\n        },\n        create: {\n          id_perfil: user.perfil!.id_perfil,\n          id_security: id_security,\n          quantity: quantity,\n        },\n      });\n\n      // @New: Update player's troop points.\n      if (pointsToAdd > 0) {\n        await tx.playerProfile.update({\n            where: { id_perfil: user.perfil!.id_perfil },\n            data: { puntos_tropas: { increment: Number(pointsToAdd) } },\n        });\n      }\n    });\n  } catch (error) {\n    console.error('Error durante la transacci\u00f3n de compra de seguridad:', error);\n    return { error: 'Ocurri\u00f3 un error al procesar la compra. Int\u00e9ntalo de nuevo.' };\n  }\n\n  // 7. Revalidate the path so the UI updates and return success.\n  revalidatePath('/dashboard/security');\n  revalidatePath('/dashboard');\n  return { success: `${quantity} ${unitToPurchase.nombre}(s) adquirido(s) exitosamente.` };\n}\n"
        },
        {
          "name": "training.ts",
          "type": "file",
          "content": "'use server';\n\nimport { z } from 'zod';\nimport prisma from '@/lib/prisma';\nimport { protectAction } from '@/lib/auth';\nimport { revalidatePath } from 'next/cache';\n\nconst upgradeTrainingSchema = z.object({\n  id_training: z.number().int().positive(),\n});\n\n/**\n * Server Action to handle the logic of upgrading a training skill.\n * @param values Object containing the training ID.\n * @returns A success or error object.\n */\nexport async function upgradeTraining(\n  values: z.infer<typeof upgradeTrainingSchema>\n): Promise<{ success?: string; error?: string }> {\n  // 1. Authenticate user and check for required data.\n  const user = await protectAction();\n  if (!user.perfil || !user.recursos) {\n    return { error: 'Datos del jugador incompletos.' };\n  }\n\n  // 2. Validate input.\n  const validatedFields = upgradeTrainingSchema.safeParse(values);\n  if (!validatedFields.success) {\n    return { error: 'ID de entrenamiento inv\u00e1lido.' };\n  }\n  const { id_training } = validatedFields.data;\n\n  // 3. Fetch training details from catalog.\n  const training = await prisma.training.findUnique({ where: { id_training } });\n  if (!training) {\n    return { error: 'Entrenamiento no encontrado.' };\n  }\n\n  // 4. Get player's current level for this training.\n  const playerTraining = await prisma.playerTraining.findUnique({\n    where: {\n      id_perfil_id_training: {\n        id_perfil: user.perfil.id_perfil,\n        id_training: id_training,\n      },\n    },\n  });\n\n  const currentLevel = playerTraining?.level ?? 0;\n  \n  // 5. Calculate costs for the next level.\n  const costFactor = Math.pow(training.fac_costo, currentLevel);\n  const cost = {\n    armas: BigInt(Math.floor(training.c_armas * costFactor)),\n    municion: BigInt(Math.floor(training.c_municion * costFactor)),\n    alcohol: BigInt(Math.floor(training.c_alcohol * costFactor)),\n    dolares: BigInt(Math.floor(training.c_dolares * costFactor)),\n  };\n\n  // 6. Check for sufficient resources.\n  if (\n    user.recursos.armas < cost.armas ||\n    user.recursos.municion < cost.municion ||\n    user.recursos.alcohol < cost.alcohol ||\n    user.recursos.dolares < cost.dolares\n  ) {\n    return { error: 'Recursos insuficientes para esta mejora.' };\n  }\n\n  // 7. Calculate points for the upgrade.\n  const totalResourceCost = cost.armas + cost.municion + cost.alcohol + cost.dolares;\n  const pointsToAdd = totalResourceCost > 0 ? totalResourceCost / 1000n : 0n;\n\n  // 8. Perform the upgrade in a transaction.\n  try {\n    await prisma.$transaction(async (tx) => {\n      // Decrement resources.\n      await tx.playerResources.update({\n        where: { id_usuario: user.id_usuario },\n        data: {\n          armas: { decrement: cost.armas },\n          municion: { decrement: cost.municion },\n          alcohol: { decrement: cost.alcohol },\n          dolares: { decrement: cost.dolares },\n        },\n      });\n\n      // Increment training level using upsert for robustness.\n      await tx.playerTraining.upsert({\n        where: {\n          id_perfil_id_training: {\n            id_perfil: user.perfil!.id_perfil,\n            id_training: id_training,\n          },\n        },\n        update: { level: { increment: 1 } },\n        create: {\n          id_perfil: user.perfil!.id_perfil,\n          id_training: id_training,\n          level: 1,\n        },\n      });\n\n      // Increment training points.\n      if (pointsToAdd > 0) {\n        await tx.playerProfile.update({\n          where: { id_perfil: user.perfil!.id_perfil },\n          data: { puntos_entrenamiento: { increment: Number(pointsToAdd) } },\n        });\n      }\n    });\n  } catch (error) {\n    console.error('Error al mejorar entrenamiento:', error);\n    return { error: 'Ocurri\u00f3 un error al mejorar el entrenamiento.' };\n  }\n\n  // 9. Revalidate paths and return success.\n  revalidatePath('/dashboard/training');\n  revalidatePath('/dashboard');\n  return { success: `\u00a1'${training.nombre}' mejorado al nivel ${currentLevel + 1}!` };\n}\n"
        }
      ]
    },
    {
      "name": "ai",
      "type": "directory",
      "children": [
        {
          "name": "dev.ts",
          "type": "file",
          "content": "// Flows will be imported for their side effects in this file.\n"
        },
        {
          "name": "genkit.ts",
          "type": "file",
          "content": "import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"
        }
      ]
    },
    {
      "name": "app",
      "type": "directory",
      "children": [
        {
          "name": "(authenticated)",
          "type": "directory",
          "children": [
            {
              "name": "dashboard",
              "type": "directory",
              "children": [
                {
                  "name": "buildings",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "import {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Construction } from \"lucide-react\";\n\nexport default function BuildingsPage() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <Construction className=\"h-6 w-6 text-primary\" />\n            <div>\n              <CardTitle>Edificios</CardTitle>\n              <CardDescription>\n                Este m\u00f3dulo est\u00e1 actualmente en construcci\u00f3n.\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground\">Vuelve pronto para ver las nuevas funcionalidades.</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"
                    }
                  ]
                },
                {
                  "name": "family",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "import {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Construction } from \"lucide-react\";\n\nexport default function FamilyPage() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <Construction className=\"h-6 w-6 text-primary\" />\n            <div>\n              <CardTitle>Familia</CardTitle>\n              <CardDescription>\n                Este m\u00f3dulo est\u00e1 actualmente en construcci\u00f3n.\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground\">Vuelve pronto para ver las nuevas funcionalidades.</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"
                    }
                  ]
                },
                {
                  "name": "farms",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "import FarmsView from \"@/components/farms/FarmsView\";\n\nexport default function FarmsPage() {\n  return <FarmsView />;\n}\n"
                    }
                  ]
                },
                {
                  "name": "map",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "import { protectPage } from '@/lib/auth';\nimport prisma from '@/lib/prisma';\nimport { MapGrid } from '@/components/map/MapGrid';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Map as MapIcon, ArrowLeft, ArrowRight } from 'lucide-react';\nimport Link from 'next/link';\n\n// Helper function to safely parse and clamp numeric search parameters.\nfunction getClampedCoordinate(\n  param: string | string[] | undefined,\n  defaultValue: number,\n  min: number,\n  max: number\n): number {\n  const valueStr = Array.isArray(param) ? param[0] : param;\n  if (valueStr && !isNaN(Number(valueStr))) {\n    const parsed = Number(valueStr);\n    return Math.max(min, Math.min(parsed, max));\n  }\n  return defaultValue;\n}\n\n\n// @Workaround: Set searchParams to `any` to bypass a persistent and unusual\n// type error in the Netlify build environment. The component's logic correctly\n// handles the possible structures of searchParams.\nexport default async function MapPage({\n  searchParams,\n}: {\n  searchParams: any;\n}) {\n  const user = await protectPage();\n\n  const userProperty = user.propiedades?.[0];\n\n  // Parse and clamp all coordinates from searchParams, with fallbacks to the user's property or defaults.\n  const currentX = getClampedCoordinate(searchParams?.x, userProperty?.coord_x ?? 25, 1, 50);\n  const currentY = getClampedCoordinate(searchParams?.y, userProperty?.coord_y ?? 25, 1, 50);\n  const currentSector = getClampedCoordinate(searchParams?.sector, userProperty?.coord_z ?? 1, 1, 255);\n\n  // Fetch all properties in the current sector\n  const properties = await prisma.propiedad.findMany({\n    where: {\n      coord_z: currentSector,\n    },\n    include: {\n      usuario: {\n        select: {\n          id_usuario: true,\n          usuario: true,\n        },\n      },\n    },\n  });\n  \n  // Filter out properties where the user might have been deleted but the property remains\n  const validProperties = properties.filter(p => p.usuario !== null);\n\n  const baseHref = (x: number, y: number, z: number) => `/dashboard/map?x=${x}&y=${y}&sector=${z}`;\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <MapIcon className=\"h-6 w-6\" />\n            <div>\n              <CardTitle>Navegaci\u00f3n del Mapa</CardTitle>\n              <CardDescription>\n                Explorando Sector {currentSector}, Coordenadas [{currentX}:{currentY}]. Usa los controles para moverte.\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {/* Navigation Controls */}\n          <form action=\"/dashboard/map\" method=\"GET\" className=\"space-y-4 mb-4 p-4 rounded-md border bg-muted/50\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-x-6 gap-y-4\">\n              {/* X Coordinate Navigation */}\n              <div className=\"flex flex-col items-center gap-2\">\n                  <Label htmlFor=\"coord-x\" className=\"font-semibold\">Coordenada X</Label>\n                  <div className=\"flex items-center gap-2\">\n                      <Button asChild variant=\"outline\" size=\"sm\" disabled={currentX <= 1} className=\"px-2\">\n                          <Link href={baseHref(currentX - 1, currentY, currentSector)}>\n                              <ArrowLeft className=\"h-4 w-4\" />\n                          </Link>\n                      </Button>\n                      <Input\n                          id=\"coord-x\"\n                          type=\"number\"\n                          name=\"x\"\n                          defaultValue={currentX}\n                          className=\"w-20 h-9 text-center\"\n                          min=\"1\"\n                          max=\"50\"\n                      />\n                      <Button asChild variant=\"outline\" size=\"sm\" disabled={currentX >= 50} className=\"px-2\">\n                          <Link href={baseHref(currentX + 1, currentY, currentSector)}>\n                              <ArrowRight className=\"h-4 w-4\" />\n                          </Link>\n                      </Button>\n                  </div>\n              </div>\n\n              {/* Y Coordinate Navigation */}\n              <div className=\"flex flex-col items-center gap-2\">\n                  <Label htmlFor=\"coord-y\" className=\"font-semibold\">Coordenada Y</Label>\n                  <div className=\"flex items-center gap-2\">\n                      <Button asChild variant=\"outline\" size=\"sm\" disabled={currentY <= 1} className=\"px-2\">\n                          <Link href={baseHref(currentX, currentY - 1, currentSector)}>\n                              <ArrowLeft className=\"h-4 w-4\" />\n                          </Link>\n                      </Button>\n                      <Input\n                          id=\"coord-y\"\n                          type=\"number\"\n                          name=\"y\"\n                          defaultValue={currentY}\n                          className=\"w-20 h-9 text-center\"\n                          min=\"1\"\n                          max=\"50\"\n                      />\n                      <Button asChild variant=\"outline\" size=\"sm\" disabled={currentY >= 50} className=\"px-2\">\n                          <Link href={baseHref(currentX, currentY + 1, currentSector)}>\n                              <ArrowRight className=\"h-4 w-4\" />\n                          </Link>\n                      </Button>\n                  </div>\n              </div>\n\n              {/* Z (Sector) Coordinate Navigation */}\n              <div className=\"flex flex-col items-center gap-2\">\n                  <Label htmlFor=\"coord-z\" className=\"font-semibold\">Sector Z</Label>\n                  <div className=\"flex items-center gap-2\">\n                      <Button asChild variant=\"outline\" size=\"sm\" disabled={currentSector <= 1} className=\"px-2\">\n                          <Link href={baseHref(currentX, currentY, currentSector - 1)}>\n                              <ArrowLeft className=\"h-4 w-4\" />\n                          </Link>\n                      </Button>\n                      <Input\n                          id=\"coord-z\"\n                          type=\"number\"\n                          name=\"sector\"\n                          defaultValue={currentSector}\n                          className=\"w-20 h-9 text-center\"\n                          min=\"1\"\n                          max=\"255\"\n                      />\n                      <Button asChild variant=\"outline\" size=\"sm\" disabled={currentSector >= 255} className=\"px-2\">\n                          <Link href={baseHref(currentX, currentY, currentSector + 1)}>\n                              <ArrowRight className=\"h-4 w-4\" />\n                          </Link>\n                      </Button>\n                  </div>\n              </div>\n            </div>\n            {/* Central \"Ir\" button */}\n            <div className=\"flex justify-center pt-2\">\n                <Button type=\"submit\">Ir a Coordenadas</Button>\n            </div>\n          </form>\n\n          {/* Map Grid */}\n          <div className=\"mt-4 w-full\">\n            <MapGrid \n                properties={validProperties} \n                currentUser={user} \n                currentSector={currentSector}\n            />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"
                    }
                  ]
                },
                {
                  "name": "missions",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "import MissionsView from \"@/components/missions/MissionsView\";\n\nexport default function MissionsPage() {\n  return <MissionsView />;\n}\n"
                    }
                  ]
                },
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { cn } from \"@/lib/utils\";\nimport { FileText, Mail, Move, Swords, User } from \"lucide-react\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { protectPage } from \"@/lib/auth\";\nimport { StatsBar } from \"@/components/dashboard/StatsBar\";\nimport { safeSerialize } from \"@/lib/serialize\";\n\nfunction StatBadge({\n  count,\n  Icon,\n  className,\n}: {\n  count: number;\n  Icon: React.ElementType;\n  className?: string;\n}) {\n  return (\n    <div\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center rounded-md border border-primary/50 bg-background transition-colors hover:bg-primary/10\",\n        className\n      )}\n    >\n      <Icon className=\"h-5 w-5 text-primary\" />\n      <div className=\"absolute -top-2 -right-2 flex h-5 w-5 items-center justify-center rounded-full bg-primary text-xs font-bold text-primary-foreground\">\n        {count}\n      </div>\n    </div>\n  );\n}\n\nexport default async function DashboardPage() {\n  const user = await protectPage();\n\n  const playerProfile = user.perfil;\n  const family = user.familia;\n  // Tomamos solo la primera propiedad para la vista general\n  const property = user.propiedades?.[0]; \n\n  // @Security: Serialize the profile object before passing it to a client component\n  // to prevent errors with non-serializable types like BigInt.\n  const serializedProfile = playerProfile ? safeSerialize(playerProfile) : null;\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      {/* Player Info & Actions Section */}\n      <section className=\"relative animate-fade-in-up\" style={{ animationDelay: '100ms' }}>\n        <div className=\"grid grid-cols-1 gap-4 md:grid-cols-3\">\n            {/* Col 1: Player */}\n            <Card className=\"flex items-center p-4\">\n              <Avatar className=\"h-16 w-16 border-2 border-primary\">\n                <AvatarImage src=\"https://placehold.co/128x128.png\" data-ai-hint=\"mafia boss\" alt=\"Avatar del jugador\" />\n                <AvatarFallback>\n                  <User className=\"h-8 w-8\" />\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"ml-4\">\n                <p className=\"text-sm text-muted-foreground\">Jugador</p>\n                <h2 className=\"text-2xl font-bold font-headline\">{user.usuario}</h2>\n              </div>\n            </Card>\n\n            {/* Col 2: Overview */}\n            <Card className=\"relative overflow-hidden\">\n              <Image\n                src=\"https://placehold.co/600x400.png\"\n                data-ai-hint=\"dark city building\"\n                alt=\"Vista del edificio\"\n                width={600}\n                height={400}\n                className=\"h-full w-full object-cover\"\n              />\n              <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 to-transparent\" />\n              <div className=\"absolute bottom-0 left-0 p-4 text-white\">\n                <p className=\"text-sm font-semibold\">Visi\u00f3n General - {property?.nombre || 'Propiedad'}</p>\n                <h2 className=\"text-2xl font-bold font-headline\">{property ? `[${property.coord_x}:${property.coord_y}:${property.coord_z}]` : '[N/A]'}</h2>\n              </div>\n            </Card>\n\n            {/* Col 3: Family */}\n            <Card className=\"flex flex-col items-center justify-center p-4\">\n              <div className=\"relative h-16 w-16\">\n                 <Image\n                    src={family?.emblema_url || \"https://placehold.co/128x128.png\"}\n                    data-ai-hint=\"family crest\"\n                    alt=\"Emblema de la familia\"\n                    width={128}\n                    height={128}\n                    className=\"rounded-full object-cover border-2 border-primary\"\n                />\n              </div>\n              <div className=\"mt-2 text-center\">\n                <p className=\"text-sm text-muted-foreground\">Familia</p>\n                <h2 className=\"text-xl font-bold font-headline\">{family?.nombre || 'Sin Familia'}</h2>\n              </div>\n            </Card>\n        </div>\n        \n        {/* Action Icons - Positioned absolutely on top of the grid */}\n        <div className=\"absolute top-4 right-4 hidden md:flex flex-col gap-3\">\n          <StatBadge Icon={Mail} count={5} />\n          <StatBadge Icon={FileText} count={12} />\n          <StatBadge Icon={Swords} count={2} />\n          <StatBadge Icon={Move} count={1} />\n        </div>\n      </section>\n\n      {/* Content Sections */}\n      <section className=\"grid grid-cols-1 gap-4 lg:grid-cols-3 animate-fade-in-up\" style={{ animationDelay: '200ms' }}>\n        <Card className=\"lg:col-span-2\">\n            <CardHeader>\n                <CardTitle>Estado Actual</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-3 rounded-md bg-card-foreground/[0.05]\">\n                    <div>\n                        <p className=\"font-semibold\">Misiones</p>\n                        <p className=\"text-sm text-muted-foreground\">3 misiones activas</p>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\">Ver misiones</Button>\n                </div>\n                 <div className=\"flex items-center justify-between p-3 rounded-md bg-card-foreground/[0.05]\">\n                    <div>\n                        <p className=\"font-semibold\">Construcci\u00f3n</p>\n                        <p className=\"text-sm text-muted-foreground\">2 edificios en cola</p>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\" asChild>\n                        <Link href=\"#\">Mostrar todo</Link>\n                    </Button>\n                </div>\n                 <div className=\"flex items-center justify-between p-3 rounded-md bg-card-foreground/[0.05]\">\n                    <div>\n                        <p className=\"font-semibold\">Reclutamiento</p>\n                        <p className=\"text-sm text-muted-foreground\">5 unidades en cola</p>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\" asChild>\n                        <Link href=\"#\">Mostrar todo</Link>\n                    </Button>\n                </div>\n            </CardContent>\n        </Card>\n        <div className=\"space-y-4\">\n            <Card>\n                <CardHeader>\n                    <CardTitle>Seguridad</CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <p className=\"text-2xl font-bold text-green-400\">\u00d3PTIMA</p>\n                    <p className=\"text-sm text-muted-foreground\">Tus defensas est\u00e1n al m\u00e1ximo.</p>\n                </CardContent>\n            </Card>\n            <Card>\n                <CardHeader>\n                    <CardTitle>Entrenamiento</CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <p className=\"text-2xl font-bold\">3/5 Unidades</p>\n                    <p className=\"text-sm text-muted-foreground\">Entrenando sicarios...</p>\n                </CardContent>\n            </Card>\n        </div>\n      </section>\n      \n      {/* Bottom Stats Bar */}\n      <section className=\"animate-fade-in-up\" style={{ animationDelay: '300ms' }}>\n        <StatsBar playerProfile={serializedProfile} properties={user.propiedades} />\n      </section>\n    </div>\n  );\n}\n"
                },
                {
                  "name": "rankings",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { protectPage } from \"@/lib/auth\";\nimport prisma from \"@/lib/prisma\";\nimport { RankingsHeader } from \"@/components/rankings/RankingsHeader\";\nimport { RankingsTable } from \"@/components/rankings/RankingsTable\";\nimport type { RankedPlayer } from \"@/components/rankings/RankingsTableRow\";\n\nexport default async function RankingsPage() {\n  const currentUser = await protectPage();\n\n  const playersWithProfiles = await prisma.user.findMany({\n    where: {\n      perfil: {\n        isNot: null,\n      },\n    },\n    include: {\n      perfil: true,\n      familia: true,\n      _count: {\n        select: { propiedades: true },\n      },\n    },\n  });\n\n  const rankedPlayers: RankedPlayer[] = playersWithProfiles\n    .map(player => {\n      const perfil = player.perfil;\n      if (!perfil) return null;\n\n      const totalPoints =\n        (perfil.puntos_edificios ?? 0) +\n        (perfil.puntos_entrenamiento ?? 0) +\n        (perfil.puntos_tropas ?? 0);\n\n      return {\n        ...player,\n        totalPoints,\n      };\n    })\n    .filter((player): player is RankedPlayer => player !== null)\n    .sort((a, b) => b.totalPoints - a.totalPoints);\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <Card>\n        <RankingsHeader />\n        <CardContent className=\"p-0 md:p-6 md:pt-0\">\n          <RankingsTable rankedPlayers={rankedPlayers} currentUser={currentUser} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"
                    }
                  ]
                },
                {
                  "name": "recruitment",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { UserPlus, Swords, Shield } from \"lucide-react\";\nimport Image from \"next/image\";\nimport prisma from \"@/lib/prisma\";\nimport type { PlayerRecruitment } from \"@prisma/client\";\nimport { protectPage } from \"@/lib/auth\";\nimport { recruitUnit } from \"@/actions/recruitment\";\n\n// Helper component to display a single resource cost for Desktop\nfunction ResourceCost({ type, value, label }: { type: 'armas' | 'municion' | 'alcohol' | 'dolares', value: number | bigint, label: string }) {\n  if (value === 0 || value === 0n) return null;\n  \n  const iconMap = {\n      armas: '/img/recursos/armas.svg',\n      municion: '/img/recursos/municion.svg',\n      alcohol: '/img/recursos/alcohol.svg',\n      dolares: '/img/recursos/dolares.svg'\n  };\n\n  return (\n    <div className=\"flex items-center gap-1.5 text-xs text-muted-foreground\" title={label}>\n      <Image src={iconMap[type]} alt={label} width={14} height={14} className=\"h-3.5 w-3.5\" />\n      <span>{Number(value).toLocaleString()}</span>\n    </div>\n  );\n}\n\n// Helper component for mobile resource costs\nfunction MobileResourceCost({ type, value, label }: { type: 'armas' | 'municion' | 'alcohol' | 'dolares', value: number | bigint, label: string }) {\n  if (value === 0 || value === 0n) return null;\n    \n  const iconMap = {\n      armas: '/img/recursos/armas.svg',\n      municion: '/img/recursos/municion.svg',\n      alcohol: '/img/recursos/alcohol.svg',\n      dolares: '/img/recursos/dolares.svg'\n  };\n\n  return (\n    <div className=\"flex items-center gap-1\" title={label}>\n      <Image src={iconMap[type]} alt={label} width={12} height={12} className=\"h-3 w-3\" />\n      <span className=\"text-destructive\">{Number(value).toLocaleString()}</span>\n    </div>\n  );\n}\n\n\nexport default async function RecruitmentPage() {\n  const user = await protectPage();\n\n  const recruitmentCatalog = await prisma.recruitment.findMany({\n    orderBy: {\n      id_recruitment: 'asc'\n    }\n  });\n  \n  const playerProfile = user.perfil;\n\n  if (!playerProfile) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Sin Perfil de Jugador</CardTitle>\n          <CardDescription>No se ha encontrado un perfil para este jugador.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <p>Aseg\u00farate de que tu usuario tenga un perfil de jugador creado.</p>\n        </CardContent>\n      </Card>\n    )\n  }\n  \n  const playerRecruitmentsMap = new Map<number, PlayerRecruitment>();\n  if (playerProfile.recruitments) {\n      for (const pr of playerProfile.recruitments) {\n          playerRecruitmentsMap.set(pr.id_recruitment, pr);\n      }\n  }\n\n  async function handleRecruit(formData: FormData) {\n    \"use server\";\n\n    const id_recruitment = Number(formData.get('id_recruitment'));\n    const quantity = Number(formData.get('quantity'));\n\n    if (isNaN(id_recruitment) || isNaN(quantity) || quantity <= 0) {\n      console.error(\"Invalid form data for recruitment\");\n      return;\n    }\n    \n    const result = await recruitUnit({ id_recruitment, quantity });\n    \n    if (result?.error) {\n        console.error(`Error de reclutamiento: ${result.error}`);\n    }\n\n    if (result?.success) {\n        console.log(`\u00c9xito: ${result.success}`);\n    }\n  }\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <UserPlus className=\"h-6 w-6\" />\n            <div>\n              <CardTitle>Centro de Reclutamiento</CardTitle>\n              <CardDescription>\n                Recluta unidades para fortalecer tu imperio y defender tus intereses.\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-0 md:p-6 md:pt-0\">\n          {/* Desktop View */}\n          <div className=\"relative hidden w-full overflow-auto md:block\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Unidad</TableHead>\n                  <TableHead className=\"hidden md:table-cell\">Descripci\u00f3n</TableHead>\n                  <TableHead>Estad\u00edsticas</TableHead>\n                  <TableHead>Costo</TableHead>\n                  <TableHead>Cantidad</TableHead>\n                  <TableHead className=\"text-right w-[200px]\">Reclutar</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {recruitmentCatalog.map((unit, index) => {\n                  const playerUnit = playerRecruitmentsMap.get(unit.id_recruitment);\n                  const currentQuantity = playerUnit ? playerUnit.quantity : 0;\n                  \n                  return (\n                    <TableRow \n                      key={unit.id_recruitment}\n                      className=\"animate-fade-in-up\"\n                      style={{ animationDelay: `${index * 50}ms`}}\n                    >\n                      <TableCell>\n                        <div className=\"flex items-center gap-4\">\n                          <Image\n                              src={unit.imagen_url.startsWith('/') ? unit.imagen_url : 'https://placehold.co/80x80.png'}\n                              data-ai-hint=\"mafia soldier\"\n                              alt={`Icono de ${unit.nombre}`}\n                              width={64}\n                              height={64}\n                              className=\"rounded-md object-cover border hidden sm:block\"\n                          />\n                          <div className=\"font-medium text-base\">{unit.nombre}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"hidden md:table-cell text-muted-foreground text-xs max-w-xs\">\n                        {unit.descripcion}\n                      </TableCell>\n                      <TableCell>\n                          <div className=\"flex flex-col gap-1.5 text-xs\">\n                            <div className=\"flex items-center gap-2\" title=\"Ataque\">\n                                  <Swords className=\"h-3.5 w-3.5 text-destructive\" />\n                                  <span>{unit.ata.toLocaleString()}</span>\n                            </div>\n                            <div className=\"flex items-center gap-2\" title=\"Defensa\">\n                                  <Shield className=\"h-3.5 w-3.5 text-blue-400\" />\n                                  <span>{unit.def.toLocaleString()}</span>\n                            </div>\n                          </div>\n                      </TableCell>\n                      <TableCell>\n                          <div className=\"grid grid-cols-2 gap-x-3 gap-y-1\">\n                              <ResourceCost type=\"armas\" value={unit.c_armas} label=\"Armas\" />\n                              <ResourceCost type=\"municion\" value={unit.c_municion} label=\"Munici\u00f3n\" />\n                              <ResourceCost type=\"alcohol\" value={unit.c_alcohol} label=\"Alcohol\" />\n                              <ResourceCost type=\"dolares\" value={unit.c_dolares} label=\"D\u00f3lares\" />\n                          </div>\n                      </TableCell>\n                      <TableCell>\n                          <div className=\"font-bold text-lg\">{currentQuantity}</div>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <form action={handleRecruit} className=\"flex items-center gap-2 justify-end\">\n                          <input type=\"hidden\" name=\"id_recruitment\" value={unit.id_recruitment} />\n                          <Input\n                            type=\"number\"\n                            name=\"quantity\"\n                            min=\"1\"\n                            placeholder=\"Cant.\"\n                            className=\"w-20 h-9\"\n                            required\n                          />\n                          <Button type=\"submit\" size=\"sm\">\n                            <UserPlus className=\"mr-2 h-4 w-4\" />\n                            Reclutar\n                          </Button>\n                        </form>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </div>\n\n          {/* Mobile View */}\n          <div className=\"divide-y divide-border md:hidden\">\n            {recruitmentCatalog.map((unit, index) => {\n              const playerUnit = playerRecruitmentsMap.get(unit.id_recruitment);\n              const currentQuantity = playerUnit ? playerUnit.quantity : 0;\n              return (\n                <div key={unit.id_recruitment} className=\"p-4 animate-fade-in-up\" style={{ animationDelay: `${index * 50}ms`}}>\n                  <div className=\"flex justify-between items-start gap-4\">\n                    <div>\n                      <p className=\"font-bold text-base\">{unit.nombre}</p>\n                      <p className=\"text-sm text-muted-foreground\">Tienes: {currentQuantity}</p>\n                    </div>\n                    <div className=\"flex flex-col items-end gap-1.5 text-xs\">\n                        <div className=\"flex items-center gap-2\" title=\"Ataque\">\n                            <Swords className=\"h-3.5 w-3.5 text-destructive\" />\n                            <span>{unit.ata.toLocaleString()}</span>\n                        </div>\n                        <div className=\"flex items-center gap-2\" title=\"Defensa\">\n                            <Shield className=\"h-3.5 w-3.5 text-blue-400\" />\n                            <span>{unit.def.toLocaleString()}</span>\n                        </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-4\">\n                      <p className=\"text-xs font-semibold text-muted-foreground\">Costo por unidad:</p>\n                      <div className=\"mt-1 grid grid-cols-2 gap-x-4 gap-y-1 text-xs\">\n                        <MobileResourceCost type=\"armas\" value={unit.c_armas} label=\"Armas\" />\n                        <MobileResourceCost type=\"municion\" value={unit.c_municion} label=\"Munici\u00f3n\" />\n                        <MobileResourceCost type=\"alcohol\" value={unit.c_alcohol} label=\"Alcohol\" />\n                        <MobileResourceCost type=\"dolares\" value={unit.c_dolares} label=\"D\u00f3lares\" />\n                      </div>\n                  </div>\n\n                  <form action={handleRecruit} className=\"mt-4 flex items-center gap-2\">\n                    <input type=\"hidden\" name=\"id_recruitment\" value={unit.id_recruitment} />\n                    <Input\n                      type=\"number\"\n                      name=\"quantity\"\n                      min=\"1\"\n                      placeholder=\"Cant.\"\n                      className=\"w-24 h-9\"\n                      required\n                    />\n                    <Button type=\"submit\" size=\"sm\" className=\"flex-grow\">\n                      <UserPlus className=\"mr-2 h-4 w-4\" />\n                      Reclutar\n                    </Button>\n                  </form>\n                </div>\n              )\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"
                    }
                  ]
                },
                {
                  "name": "resources",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "import ResourcesView from \"@/components/resources/ResourcesView\";\n\nexport default function ResourcesPage() {\n  return <ResourcesView />;\n}\n"
                    }
                  ]
                },
                {
                  "name": "rooms",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Building, ArrowUpCircle, Clock } from \"lucide-react\";\nimport Image from \"next/image\";\nimport prisma from \"@/lib/prisma\";\nimport { protectPage } from \"@/lib/auth\";\nimport { upgradeBuilding } from \"@/actions/buildings\";\nimport { buildingFieldMap } from \"@/lib/constants\";\n\n// Helper function to format seconds into a readable string (e.g., 1h 30m 15s)\nfunction formatDuration(totalSeconds: number): string {\n  if (totalSeconds <= 0) return \"0s\";\n\n  const hours = Math.floor(totalSeconds / 3600);\n  const minutes = Math.floor((totalSeconds % 3600) / 60);\n  const seconds = totalSeconds % 60;\n\n  const parts = [];\n  if (hours > 0) parts.push(`${hours}h`);\n  if (minutes > 0) parts.push(`${minutes}m`);\n  if (seconds > 0 || parts.length === 0) parts.push(`${seconds}s`);\n\n  return parts.join(' ');\n}\n\n// Helper component to display a single resource cost for Desktop\nfunction ResourceCost({ type, value, label }: { type: 'armas' | 'municion' | 'alcohol' | 'dolares', value: number, label: string }) {\n  if (value === 0) return null;\n  \n  const iconMap = {\n      armas: '/img/recursos/armas.svg',\n      municion: '/img/recursos/municion.svg',\n      alcohol: '/img/recursos/alcohol.svg',\n      dolares: '/img/recursos/dolares.svg'\n  };\n\n  return (\n    <div className=\"flex items-center gap-1.5 text-xs text-muted-foreground\" title={label}>\n      <Image src={iconMap[type]} alt={label} width={14} height={14} className=\"h-3.5 w-3.5\" />\n      <span>{value.toLocaleString()}</span>\n    </div>\n  );\n}\n\n// Helper component for mobile resource costs\nfunction MobileResourceCost({ type, value, label }: { type: 'armas' | 'municion' | 'alcohol' | 'dolares', value: number, label: string }) {\n  if (value === 0) return null;\n    \n  const iconMap = {\n      armas: '/img/recursos/armas.svg',\n      municion: '/img/recursos/municion.svg',\n      alcohol: '/img/recursos/alcohol.svg',\n      dolares: '/img/recursos/dolares.svg'\n  };\n\n  return (\n    <div className=\"flex items-center gap-1\" title={label}>\n      <Image src={iconMap[type]} alt={label} width={12} height={12} className=\"h-3 w-3 text-destructive\" />\n      <span>{value.toLocaleString()}</span>\n    </div>\n  );\n}\n\n\nexport default async function RoomsPage() {\n  const user = await protectPage();\n\n  const buildingCatalog = await prisma.building.findMany({\n    orderBy: {\n      id_edificio: 'asc'\n    }\n  });\n  \n  const playerProperty = user.propiedades?.[0];\n\n  if (!playerProperty) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Sin Propiedades</CardTitle>\n          <CardDescription>\n            No se ha encontrado ninguna propiedad para mostrar.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <p>Aseg\u00farate de que tu usuario tenga al menos una propiedad en la base de datos.</p>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  async function handleUpgrade(formData: FormData) {\n    \"use server\";\n\n    const id_edificio = Number(formData.get('id_edificio'));\n    if (isNaN(id_edificio)) {\n      console.error(\"ID de edificio inv\u00e1lido.\");\n      return;\n    }\n    \n    // Server action does not need toast logic here, it will revalidate the path\n    // For more advanced feedback, a client component with useFormState would be needed.\n    await upgradeBuilding({ id_edificio });\n  }\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <Building className=\"h-6 w-6\" />\n            <div>\n              <CardTitle>Gesti\u00f3n de Habitaciones</CardTitle>\n              <CardDescription>\n                Ampl\u00eda y gestiona los edificios de tu propiedad: {playerProperty.nombre}.\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-0 md:p-6 md:pt-0\">\n           {/* Desktop View */}\n          <div className=\"relative hidden w-full overflow-auto md:block\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"w-[100px] hidden sm:table-cell\">Imagen</TableHead>\n                  <TableHead>Edificio y Nivel</TableHead>\n                  <TableHead className=\"hidden lg:table-cell\">Descripci\u00f3n</TableHead>\n                  <TableHead className=\"w-[180px]\">Costo de Ampliaci\u00f3n</TableHead>\n                  <TableHead className=\"text-right w-[120px]\">Acciones</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {buildingCatalog.map((building, index) => {\n                  const buildingKey = buildingFieldMap[building.nombre];\n                  const level = buildingKey ? (playerProperty[buildingKey] as number) : 0;\n                  const nextLevel = level + 1;\n\n                  // Calculate cost for the next level\n                  const costFactor = Math.pow(building.fac_costo, level);\n                  const costArmas = Math.floor(building.c_armas * costFactor);\n                  const costMunicion = Math.floor(building.c_municion * costFactor);\n                  const costAlcohol = Math.floor(building.c_alcohol * costFactor);\n                  const costDolares = Math.floor(building.c_dolares * costFactor);\n\n                  // Calculate time for the next level\n                  const baseDurationSeconds = (parseInt(building.t_horas) * 3600) + (parseInt(building.t_minutos) * 60) + parseInt(building.t_segundos);\n                  const durationFactor = Math.pow(building.fac_dura, level);\n                  const nextDurationSeconds = Math.floor(baseDurationSeconds * durationFactor);\n                  \n                  return (\n                    <TableRow \n                      key={building.id_edificio}\n                      className=\"animate-fade-in-up\"\n                      style={{ animationDelay: `${index * 50}ms`}}\n                    >\n                      <TableCell className=\"hidden sm:table-cell\">\n                        <Image\n                          src={building.imagen_url || 'https://placehold.co/80x80.png'}\n                          alt={`Imagen de ${building.nombre}`}\n                          width={80}\n                          height={80}\n                          className=\"rounded-md object-cover border\"\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"font-medium text-base\">{building.nombre}</div>\n                        <div className=\"text-sm font-bold text-primary\">Nivel {level}</div>\n                      </TableCell>\n                      <TableCell className=\"hidden lg:table-cell text-muted-foreground text-xs\">\n                        {building.descripcion}\n                      </TableCell>\n                      <TableCell>\n                          <div className=\"flex flex-col gap-1.5\">\n                              <div className=\"font-semibold text-xs text-foreground\">Al Nivel {nextLevel}:</div>\n                              <div className=\"grid grid-cols-2 gap-x-3 gap-y-1\">\n                                  <ResourceCost type=\"armas\" value={costArmas} label=\"Armas\" />\n                                  <ResourceCost type=\"municion\" value={costMunicion} label=\"Munici\u00f3n\" />\n                                  <ResourceCost type=\"alcohol\" value={costAlcohol} label=\"Alcohol\" />\n                                  <ResourceCost type=\"dolares\" value={costDolares} label=\"D\u00f3lares\" />\n                              </div>\n                              <Separator className=\"my-1 bg-border/60\" />\n                              <div className=\"flex items-center gap-2 text-xs font-semibold text-muted-foreground\">\n                                  <Clock className=\"h-3.5 w-3.5\" />\n                                  <span>{formatDuration(nextDurationSeconds)}</span>\n                              </div>\n                          </div>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <form action={handleUpgrade}>\n                          <input type=\"hidden\" name=\"id_edificio\" value={building.id_edificio} />\n                          <Button type=\"submit\" variant=\"outline\" size=\"sm\">\n                            <ArrowUpCircle className=\"mr-2 h-4 w-4\" />\n                            Ampliar\n                          </Button>\n                        </form>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </div>\n\n          {/* Mobile View */}\n          <div className=\"divide-y divide-border md:hidden\">\n             {buildingCatalog.map((building, index) => {\n                  const buildingKey = buildingFieldMap[building.nombre];\n                  const level = buildingKey ? (playerProperty[buildingKey] as number) : 0;\n                  const nextLevel = level + 1;\n\n                  const costFactor = Math.pow(building.fac_costo, level);\n                  const costArmas = Math.floor(building.c_armas * costFactor);\n                  const costMunicion = Math.floor(building.c_municion * costFactor);\n                  const costAlcohol = Math.floor(building.c_alcohol * costFactor);\n                  const costDolares = Math.floor(building.c_dolares * costFactor);\n\n                  const baseDurationSeconds = (parseInt(building.t_horas) * 3600) + (parseInt(building.t_minutos) * 60) + parseInt(building.t_segundos);\n                  const durationFactor = Math.pow(building.fac_dura, level);\n                  const nextDurationSeconds = Math.floor(baseDurationSeconds * durationFactor);\n              \n              return (\n                <div key={building.id_edificio} className=\"grid grid-cols-[1fr_auto] items-start gap-4 p-4 animate-fade-in-up\" style={{ animationDelay: `${index * 50}ms`}}>\n                  {/* Left Column */}\n                  <div>\n                    <p className=\"font-bold text-base\">{building.nombre}</p>\n                    <p className=\"text-sm font-bold text-primary\">Nivel {level}</p>\n                  </div>\n\n                  {/* Right Column */}\n                  <div className=\"flex flex-col items-end gap-3\">\n                    <div className=\"text-right\">\n                      <p className=\"text-xs font-semibold text-muted-foreground\">Al Nivel {nextLevel}:</p>\n                      <div className=\"mt-1 flex flex-wrap justify-end gap-x-3 gap-y-1 text-xs text-muted-foreground\">\n                        <MobileResourceCost type=\"armas\" value={costArmas} label=\"Armas\" />\n                        <MobileResourceCost type=\"municion\" value={costMunicion} label=\"Munici\u00f3n\" />\n                        <MobileResourceCost type=\"alcohol\" value={costAlcohol} label=\"Alcohol\" />\n                        <MobileResourceCost type=\"dolares\" value={costDolares} label=\"D\u00f3lares\" />\n                      </div>\n                      <div className=\"mt-2 flex items-center justify-end gap-1.5 text-xs font-semibold text-muted-foreground\">\n                        <Clock className=\"h-3.5 w-3.5\" />\n                        <span>{formatDuration(nextDurationSeconds)}</span>\n                      </div>\n                    </div>\n                    <form action={handleUpgrade} className=\"w-full\">\n                      <input type=\"hidden\" name=\"id_edificio\" value={building.id_edificio} />\n                      <Button type=\"submit\" variant=\"outline\" size=\"sm\" className=\"w-full\">\n                        <ArrowUpCircle className=\"mr-2 h-4 w-4\" />\n                        Ampliar\n                      </Button>\n                    </form>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"
                    }
                  ]
                },
                {
                  "name": "search",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "import SearchView from \"@/components/search/SearchView\";\n\nexport default function SearchPage() {\n  return <SearchView />;\n}\n"
                    }
                  ]
                },
                {
                  "name": "security",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Swords, Shield, ShieldCheck } from \"lucide-react\";\nimport Image from \"next/image\";\nimport prisma from \"@/lib/prisma\";\nimport type { PlayerSecurity } from \"@prisma/client\";\nimport { protectPage } from \"@/lib/auth\";\nimport { purchaseSecurity } from \"@/actions/security\";\n\n// Helper component to display a single resource cost for Desktop\nfunction ResourceCost({ type, value, label }: { type: 'armas' | 'municion' | 'alcohol' | 'dolares', value: number | bigint, label: string }) {\n  if (value === 0 || value === 0n) return null;\n  \n  const iconMap = {\n      armas: '/img/recursos/armas.svg',\n      municion: '/img/recursos/municion.svg',\n      alcohol: '/img/recursos/alcohol.svg',\n      dolares: '/img/recursos/dolares.svg'\n  };\n\n  return (\n    <div className=\"flex items-center gap-1.5 text-xs text-muted-foreground\" title={label}>\n      <Image src={iconMap[type]} alt={label} width={14} height={14} className=\"h-3.5 w-3.5\" />\n      <span>{Number(value).toLocaleString()}</span>\n    </div>\n  );\n}\n\n// Helper component for mobile resource costs\nfunction MobileResourceCost({ type, value, label }: { type: 'armas' | 'municion' | 'alcohol' | 'dolares', value: number | bigint, label: string }) {\n  if (value === 0 || value === 0n) return null;\n    \n  const iconMap = {\n      armas: '/img/recursos/armas.svg',\n      municion: '/img/recursos/municion.svg',\n      alcohol: '/img/recursos/alcohol.svg',\n      dolares: '/img/recursos/dolares.svg'\n  };\n\n  return (\n    <div className=\"flex items-center gap-1\" title={label}>\n      <Image src={iconMap[type]} alt={label} width={12} height={12} className=\"h-3 w-3\" />\n      <span className=\"text-destructive\">{Number(value).toLocaleString()}</span>\n    </div>\n  );\n}\n\nexport default async function SecurityPage() {\n  const user = await protectPage();\n\n  const securityCatalog = await prisma.security.findMany({\n    orderBy: {\n      id_security: 'asc'\n    }\n  });\n  \n  const playerProfile = user.perfil;\n\n  if (!playerProfile) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Sin Perfil de Jugador</CardTitle>\n          <CardDescription>No se ha encontrado un perfil para este jugador.</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <p>Aseg\u00farate de que tu usuario tenga un perfil de jugador creado.</p>\n        </CardContent>\n      </Card>\n    )\n  }\n  \n  const playerSecuritiesMap = new Map<number, PlayerSecurity>();\n  if (playerProfile.securities) {\n      for (const ps of playerProfile.securities) {\n          playerSecuritiesMap.set(ps.id_security, ps);\n      }\n  }\n\n  async function handlePurchase(formData: FormData) {\n    \"use server\";\n\n    const id_security = Number(formData.get('id_security'));\n    const quantity = Number(formData.get('quantity'));\n\n    if (isNaN(id_security) || isNaN(quantity) || quantity <= 0) {\n      console.error(\"Invalid form data for security purchase\");\n      return;\n    }\n    \n    const result = await purchaseSecurity({ id_security, quantity });\n    \n    if (result?.error) {\n        console.error(`Error de compra: ${result.error}`);\n    }\n\n    if (result?.success) {\n        console.log(`\u00c9xito: ${result.success}`);\n    }\n  }\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <ShieldCheck className=\"h-6 w-6\" />\n            <div>\n              <CardTitle>Centro de Seguridad</CardTitle>\n              <CardDescription>\n                Refuerza tus defensas para proteger tu propiedad de amenazas.\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-0 md:p-6 md:pt-0\">\n          {/* Desktop View */}\n          <div className=\"relative hidden w-full overflow-auto md:block\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Unidad</TableHead>\n                  <TableHead className=\"hidden md:table-cell\">Descripci\u00f3n</TableHead>\n                  <TableHead>Estad\u00edsticas</TableHead>\n                  <TableHead>Costo</TableHead>\n                  <TableHead>Cantidad</TableHead>\n                  <TableHead className=\"text-right w-[200px]\">Adquirir</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {securityCatalog.map((unit, index) => {\n                  const playerUnit = playerSecuritiesMap.get(unit.id_security);\n                  const currentQuantity = playerUnit ? playerUnit.quantity : 0;\n                  \n                  return (\n                    <TableRow \n                      key={unit.id_security}\n                      className=\"animate-fade-in-up\"\n                      style={{ animationDelay: `${index * 50}ms`}}\n                    >\n                      <TableCell>\n                        <div className=\"flex items-center gap-4\">\n                          <Image\n                              src={unit.imagen_url.startsWith('/') ? unit.imagen_url : 'https://placehold.co/80x80.png'}\n                              data-ai-hint=\"security unit\"\n                              alt={`Icono de ${unit.nombre}`}\n                              width={64}\n                              height={64}\n                              className=\"rounded-md object-cover border hidden sm:block\"\n                          />\n                          <div className=\"font-medium text-base\">{unit.nombre}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell className=\"hidden md:table-cell text-muted-foreground text-xs max-w-xs\">\n                        {unit.descripcion}\n                      </TableCell>\n                      <TableCell>\n                          <div className=\"flex flex-col gap-1.5 text-xs\">\n                            <div className=\"flex items-center gap-2\" title=\"Ataque\">\n                                  <Swords className=\"h-3.5 w-3.5 text-destructive\" />\n                                  <span>{unit.ata.toLocaleString()}</span>\n                            </div>\n                            <div className=\"flex items-center gap-2\" title=\"Defensa\">\n                                  <Shield className=\"h-3.5 w-3.5 text-blue-400\" />\n                                  <span>{unit.def.toLocaleString()}</span>\n                            </div>\n                          </div>\n                      </TableCell>\n                      <TableCell>\n                          <div className=\"grid grid-cols-2 gap-x-3 gap-y-1\">\n                              <ResourceCost type=\"armas\" value={unit.c_armas} label=\"Armas\" />\n                              <ResourceCost type=\"municion\" value={unit.c_municion} label=\"Munici\u00f3n\" />\n                              <ResourceCost type=\"alcohol\" value={unit.c_alcohol} label=\"Alcohol\" />\n                              <ResourceCost type=\"dolares\" value={unit.c_dolares} label=\"D\u00f3lares\" />\n                          </div>\n                      </TableCell>\n                      <TableCell>\n                          <div className=\"font-bold text-lg\">{currentQuantity}</div>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <form action={handlePurchase} className=\"flex items-center gap-2 justify-end\">\n                          <input type=\"hidden\" name=\"id_security\" value={unit.id_security} />\n                          <Input\n                            type=\"number\"\n                            name=\"quantity\"\n                            min=\"1\"\n                            placeholder=\"Cant.\"\n                            className=\"w-20 h-9\"\n                            required\n                          />\n                          <Button type=\"submit\" size=\"sm\">\n                            <ShieldCheck className=\"mr-2 h-4 w-4\" />\n                            Adquirir\n                          </Button>\n                        </form>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </div>\n\n          {/* Mobile View */}\n          <div className=\"divide-y divide-border md:hidden\">\n            {securityCatalog.map((unit, index) => {\n              const playerUnit = playerSecuritiesMap.get(unit.id_security);\n              const currentQuantity = playerUnit ? playerUnit.quantity : 0;\n              return (\n                <div key={unit.id_security} className=\"p-4 animate-fade-in-up\" style={{ animationDelay: `${index * 50}ms`}}>\n                  <div className=\"flex justify-between items-start gap-4\">\n                    <div>\n                      <p className=\"font-bold text-base\">{unit.nombre}</p>\n                      <p className=\"text-sm text-muted-foreground\">Tienes: {currentQuantity}</p>\n                    </div>\n                    <div className=\"flex flex-col items-end gap-1.5 text-xs\">\n                        <div className=\"flex items-center gap-2\" title=\"Ataque\">\n                            <Swords className=\"h-3.5 w-3.5 text-destructive\" />\n                            <span>{unit.ata.toLocaleString()}</span>\n                        </div>\n                        <div className=\"flex items-center gap-2\" title=\"Defensa\">\n                            <Shield className=\"h-3.5 w-3.5 text-blue-400\" />\n                            <span>{unit.def.toLocaleString()}</span>\n                        </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-4\">\n                      <p className=\"text-xs font-semibold text-muted-foreground\">Costo por unidad:</p>\n                      <div className=\"mt-1 grid grid-cols-2 gap-x-4 gap-y-1 text-xs\">\n                        <MobileResourceCost type=\"armas\" value={unit.c_armas} label=\"Armas\" />\n                        <MobileResourceCost type=\"municion\" value={unit.c_municion} label=\"Munici\u00f3n\" />\n                        <MobileResourceCost type=\"alcohol\" value={unit.c_alcohol} label=\"Alcohol\" />\n                        <MobileResourceCost type=\"dolares\" value={unit.c_dolares} label=\"D\u00f3lares\" />\n                      </div>\n                  </div>\n\n                  <form action={handlePurchase} className=\"mt-4 flex items-center gap-2\">\n                    <input type=\"hidden\" name=\"id_security\" value={unit.id_security} />\n                    <Input\n                      type=\"number\"\n                      name=\"quantity\"\n                      min=\"1\"\n                      placeholder=\"Cant.\"\n                      className=\"w-24 h-9\"\n                      required\n                    />\n                    <Button type=\"submit\" size=\"sm\" className=\"flex-grow\">\n                      <ShieldCheck className=\"mr-2 h-4 w-4\" />\n                      Adquirir\n                    </Button>\n                  </form>\n                </div>\n              )\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"
                    }
                  ]
                },
                {
                  "name": "simulator",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "import SimulatorView from \"@/components/simulator/SimulatorView\";\n\nexport default function SimulatorPage() {\n  return <SimulatorView />;\n}\n"
                    }
                  ]
                },
                {
                  "name": "stats",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "import StatsView from \"@/components/stats/StatsView\";\n\nexport default function StatsPage() {\n  return <StatsView />;\n}\n"
                    }
                  ]
                },
                {
                  "name": "technologies",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "import TechnologiesView from \"@/components/technologies/TechnologiesView\";\n\nexport default function TechnologiesPage() {\n  return <TechnologiesView />;\n}\n"
                    }
                  ]
                },
                {
                  "name": "training",
                  "type": "directory",
                  "children": [
                    {
                      "name": "page.tsx",
                      "type": "file",
                      "content": "\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Target, ArrowUpCircle, Clock } from \"lucide-react\";\nimport Image from \"next/image\";\nimport prisma from \"@/lib/prisma\";\nimport type { PlayerTraining } from \"@prisma/client\";\nimport { protectPage } from \"@/lib/auth\";\nimport { upgradeTraining } from \"@/actions/training\";\n\n// Helper function to format seconds into a readable string (e.g., 1h 30m 15s)\nfunction formatDuration(totalSeconds: number): string {\n  if (totalSeconds <= 0) return \"0s\";\n\n  const hours = Math.floor(totalSeconds / 3600);\n  const minutes = Math.floor((totalSeconds % 3600) / 60);\n  const seconds = totalSeconds % 60;\n\n  const parts = [];\n  if (hours > 0) parts.push(`${hours}h`);\n  if (minutes > 0) parts.push(`${minutes}m`);\n  if (seconds > 0 || parts.length === 0) parts.push(`${seconds}s`);\n\n  return parts.join(' ');\n}\n\n// Helper component to display a single resource cost for Desktop\nfunction ResourceCost({ type, value, label }: { type: 'armas' | 'municion' | 'alcohol' | 'dolares', value: number, label: string }) {\n  if (value === 0) return null;\n  \n  const iconMap = {\n      armas: '/img/recursos/armas.svg',\n      municion: '/img/recursos/municion.svg',\n      alcohol: '/img/recursos/alcohol.svg',\n      dolares: '/img/recursos/dolares.svg'\n  };\n\n  return (\n    <div className=\"flex items-center gap-1.5 text-xs text-muted-foreground\" title={label}>\n      <Image src={iconMap[type]} alt={label} width={14} height={14} className=\"h-3.5 w-3.5\" />\n      <span>{value.toLocaleString()}</span>\n    </div>\n  );\n}\n\n// Helper component for mobile resource costs\nfunction MobileResourceCost({ type, value, label }: { type: 'armas' | 'municion' | 'alcohol' | 'dolares', value: number, label: string }) {\n  if (value === 0) return null;\n    \n  const iconMap = {\n      armas: '/img/recursos/armas.svg',\n      municion: '/img/recursos/municion.svg',\n      alcohol: '/img/recursos/alcohol.svg',\n      dolares: '/img/recursos/dolares.svg'\n  };\n\n  return (\n    <div className=\"flex items-center gap-1\" title={label}>\n      <Image src={iconMap[type]} alt={label} width={12} height={12} className=\"h-3 w-3 text-destructive\" />\n      <span>{value.toLocaleString()}</span>\n    </div>\n  );\n}\n\nexport default async function TrainingPage() {\n  const user = await protectPage();\n\n  const trainingCatalog = await prisma.training.findMany({\n    orderBy: {\n      id_training: 'asc'\n    }\n  });\n  \n  const playerProfile = user.perfil;\n\n  if (!playerProfile) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Sin Perfil de Jugador</CardTitle>\n          <CardDescription>\n            No se ha encontrado un perfil para este jugador.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <p>Aseg\u00farate de que tu usuario tenga un perfil de jugador creado.</p>\n        </CardContent>\n      </Card>\n    )\n  }\n  \n  const playerTrainingsMap = new Map<number, PlayerTraining>();\n  if (playerProfile.trainings) {\n      for (const pt of playerProfile.trainings) {\n          playerTrainingsMap.set(pt.id_training, pt);\n      }\n  }\n\n  async function handleImprove(formData: FormData) {\n    \"use server\";\n    \n    const id_training = Number(formData.get('id_training'));\n    if (isNaN(id_training)) {\n      console.error(\"ID de entrenamiento inv\u00e1lido.\");\n      return;\n    }\n    \n    await upgradeTraining({ id_training });\n  }\n\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <Target className=\"h-6 w-6\" />\n            <div>\n              <CardTitle>Centro de Entrenamiento</CardTitle>\n              <CardDescription>\n                Mejora las habilidades de tus unidades para dominar el campo de batalla.\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-0 md:p-6 md:pt-0\">\n          {/* Desktop View */}\n          <div className=\"relative hidden w-full overflow-auto md:block\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"w-[100px] hidden sm:table-cell\">Icono</TableHead>\n                  <TableHead>Entrenamiento y Nivel</TableHead>\n                  <TableHead className=\"hidden lg:table-cell\">Descripci\u00f3n</TableHead>\n                  <TableHead className=\"w-[180px]\">Costo de Mejora</TableHead>\n                  <TableHead className=\"text-right w-[120px]\">Acciones</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {trainingCatalog.map((training, index) => {\n                  const playerTraining = playerTrainingsMap.get(training.id_training);\n                  const level = playerTraining ? playerTraining.level : 0;\n                  const nextLevel = level + 1;\n\n                  const costFactor = Math.pow(training.fac_costo, level);\n                  const costArmas = Math.floor(training.c_armas * costFactor);\n                  const costMunicion = Math.floor(training.c_municion * costFactor);\n                  const costAlcohol = Math.floor(training.c_alcohol * costFactor);\n                  const costDolares = Math.floor(training.c_dolares * costFactor);\n\n                  const baseDurationSeconds = (parseInt(training.t_horas) * 3600) + (parseInt(training.t_minutos) * 60) + parseInt(training.t_segundos);\n                  const durationFactor = Math.pow(training.fac_dura, level);\n                  const nextDurationSeconds = Math.floor(baseDurationSeconds * durationFactor);\n                  \n                  return (\n                    <TableRow \n                      key={training.id_training}\n                      className=\"animate-fade-in-up\"\n                      style={{ animationDelay: `${index * 50}ms`}}\n                    >\n                      <TableCell className=\"hidden sm:table-cell\">\n                        <Image\n                          src={training.imagen_url.startsWith('/') ? training.imagen_url : 'https://placehold.co/80x80.png'}\n                          data-ai-hint=\"training skill icon\"\n                          alt={`Icono de ${training.nombre}`}\n                          width={80}\n                          height={80}\n                          className=\"rounded-md object-cover border\"\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"font-medium text-base\">{training.nombre}</div>\n                        <div className=\"text-sm font-bold text-primary\">Nivel {level}</div>\n                      </TableCell>\n                      <TableCell className=\"hidden lg:table-cell text-muted-foreground text-xs\">\n                        {training.descripcion}\n                      </TableCell>\n                      <TableCell>\n                          <div className=\"flex flex-col gap-1.5\">\n                              <div className=\"font-semibold text-xs text-foreground\">Al Nivel {nextLevel}:</div>\n                              <div className=\"grid grid-cols-2 gap-x-3 gap-y-1\">\n                                  <ResourceCost type=\"armas\" value={costArmas} label=\"Armas\" />\n                                  <ResourceCost type=\"municion\" value={costMunicion} label=\"Munici\u00f3n\" />\n                                  <ResourceCost type=\"alcohol\" value={costAlcohol} label=\"Alcohol\" />\n                                  <ResourceCost type=\"dolares\" value={costDolares} label=\"D\u00f3lares\" />\n                              </div>\n                              <Separator className=\"my-1 bg-border/60\" />\n                              <div className=\"flex items-center gap-2 text-xs font-semibold text-muted-foreground\">\n                                  <Clock className=\"h-3.5 w-3.5\" />\n                                  <span>{formatDuration(nextDurationSeconds)}</span>\n                              </div>\n                          </div>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <form action={handleImprove}>\n                          <input type=\"hidden\" name=\"id_training\" value={training.id_training} />\n                          <Button type=\"submit\" variant=\"outline\" size=\"sm\">\n                            <ArrowUpCircle className=\"mr-2 h-4 w-4\" />\n                            Mejorar\n                          </Button>\n                        </form>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </TableBody>\n            </Table>\n          </div>\n          \n          {/* Mobile View */}\n          <div className=\"divide-y divide-border md:hidden\">\n             {trainingCatalog.map((training, index) => {\n                  const playerTraining = playerTrainingsMap.get(training.id_training);\n                  const level = playerTraining ? playerTraining.level : 0;\n                  const nextLevel = level + 1;\n\n                  const costFactor = Math.pow(training.fac_costo, level);\n                  const costArmas = Math.floor(training.c_armas * costFactor);\n                  const costMunicion = Math.floor(training.c_municion * costFactor);\n                  const costAlcohol = Math.floor(training.c_alcohol * costFactor);\n                  const costDolares = Math.floor(training.c_dolares * costFactor);\n\n                  const baseDurationSeconds = (parseInt(training.t_horas) * 3600) + (parseInt(training.t_minutos) * 60) + parseInt(training.t_segundos);\n                  const durationFactor = Math.pow(training.fac_dura, level);\n                  const nextDurationSeconds = Math.floor(baseDurationSeconds * durationFactor);\n              \n              return (\n                <div key={training.id_training} className=\"grid grid-cols-[1fr_auto] items-start gap-4 p-4 animate-fade-in-up\" style={{ animationDelay: `${index * 50}ms`}}>\n                  {/* Left Column */}\n                  <div>\n                    <p className=\"font-bold text-base\">{training.nombre}</p>\n                    <p className=\"text-sm font-bold text-primary\">Nivel {level}</p>\n                  </div>\n\n                  {/* Right Column */}\n                  <div className=\"flex flex-col items-end gap-3\">\n                    <div className=\"text-right\">\n                      <p className=\"text-xs font-semibold text-muted-foreground\">Al Nivel {nextLevel}:</p>\n                      <div className=\"mt-1 flex flex-wrap justify-end gap-x-3 gap-y-1 text-xs text-muted-foreground\">\n                        <MobileResourceCost type=\"armas\" value={costArmas} label=\"Armas\" />\n                        <MobileResourceCost type=\"municion\" value={costMunicion} label=\"Munici\u00f3n\" />\n                        <MobileResourceCost type=\"alcohol\" value={costAlcohol} label=\"Alcohol\" />\n                        <MobileResourceCost type=\"dolares\" value={costDolares} label=\"D\u00f3lares\" />\n                      </div>\n                      <div className=\"mt-2 flex items-center justify-end gap-1.5 text-xs font-semibold text-muted-foreground\">\n                        <Clock className=\"h-3.5 w-3.5\" />\n                        <span>{formatDuration(nextDurationSeconds)}</span>\n                      </div>\n                    </div>\n                    <form action={handleImprove} className=\"w-full\">\n                      <input type=\"hidden\" name=\"id_training\" value={training.id_training} />\n                      <Button type=\"submit\" variant=\"outline\" size=\"sm\" className=\"w-full\">\n                        <ArrowUpCircle className=\"mr-2 h-4 w-4\" />\n                        Mejorar\n                      </Button>\n                    </form>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"
                    }
                  ]
                }
              ]
            },
            {
              "name": "layout.tsx",
              "type": "file",
              "content": "import Header from \"@/components/layout/Header\";\nimport Sidebar from \"@/components/layout/Sidebar\";\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\nimport { protectPage } from \"@/lib/auth\";\nimport type { Propiedad, User } from \"@prisma/client\";\n\n// This layout is protected by the middleware, but we can add an\n// extra layer of protection here by calling protectPage().\n// This also gives us access to the user object for the layout.\nexport default async function AuthenticatedLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const user = await protectPage();\n\n  return (\n    <SidebarProvider>\n      <div className=\"flex min-h-screen w-full bg-background\">\n        <Sidebar properties={user.propiedades || []} />\n        <div className=\"flex flex-1 flex-col\">\n          <Header user={user} />\n            <main className=\"flex-1 p-4 sm:p-6 lg:p-8 animate-fade-in-up\">{children}</main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n"
            }
          ]
        },
        {
          "name": "favicon.ico",
          "type": "file"
        },
        {
          "name": "forgot-password",
          "type": "directory",
          "children": [
            {
              "name": "page.tsx",
              "type": "file",
              "content": "import ForgotPasswordForm from '@/components/auth/ForgotPasswordForm';\n\nexport default function ForgotPasswordPage() {\n  return (\n    <main className=\"flex items-center justify-center min-h-screen p-4\">\n      <ForgotPasswordForm />\n    </main>\n  );\n}\n"
            }
          ]
        },
        {
          "name": "globals.css",
          "type": "file"
        },
        {
          "name": "layout.tsx",
          "type": "file",
          "content": "import type {Metadata} from 'next';\nimport './globals.css';\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { Inter, Space_Grotesk } from 'next/font/google';\n\nconst inter = Inter({\n  subsets: ['latin'],\n  variable: '--font-inter',\n});\n\nconst spaceGrotesk = Space_Grotesk({\n  subsets: ['latin'],\n  variable: '--font-space-grotesk',\n});\n\n\nexport const metadata: Metadata = {\n  title: 'Vendetta Latino',\n  description: 'Entra en un mundo de intriga y conflicto.',\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"es\" className={`${inter.variable} ${spaceGrotesk.variable} dark`} suppressHydrationWarning>\n      <body className=\"font-body antialiased\" suppressHydrationWarning={true}>\n        {children}\n        <Toaster />\n      </body>\n    </html>\n  );\n}\n"
        },
        {
          "name": "login",
          "type": "directory",
          "children": [
            {
              "name": "page.tsx",
              "type": "file",
              "content": "import LoginForm from '@/components/auth/LoginForm';\n\nexport default function LoginPage() {\n  return (\n    <main className=\"flex items-center justify-center min-h-screen p-4\">\n      <LoginForm />\n    </main>\n  );\n}\n"
            }
          ]
        },
        {
          "name": "page.tsx",
          "type": "file",
          "content": "import { Button } from \"@/components/ui/button\";\nimport Link from \"next/link\";\nimport { MoveRight } from 'lucide-react';\n\nexport default function Home() {\n  return (\n    <main className=\"flex flex-col items-center justify-center min-h-screen p-4 text-center bg-background overflow-hidden\">\n      <div className=\"absolute top-0 left-0 w-full h-full bg-primary/[0.03] [mask-image:radial-gradient(ellipse_at_center,transparent_20%,black)]\"></div>\n      <div className=\"z-10 flex flex-col items-center\">\n        <h1 className=\"text-6xl md:text-8xl font-bold font-headline text-transparent bg-clip-text bg-gradient-to-b from-neutral-50 to-neutral-400\">\n          Vendetta Latino\n        </h1>\n        <p className=\"mt-4 max-w-lg text-lg text-muted-foreground\">\n          Entra en un mundo de intriga y conflicto. Tu historia comienza ahora.\n        </p>\n        <div className=\"mt-8 flex flex-col sm:flex-row items-center gap-4\">\n          <Link href=\"/register\" passHref>\n            <Button size=\"lg\" className=\"w-48 bg-primary hover:bg-primary/90 text-primary-foreground\">\n              \u00danete a la lucha\n              <MoveRight className=\"ml-2 h-5 w-5\" />\n            </Button>\n          </Link>\n          <Link href=\"/login\" passHref>\n            <Button size=\"lg\" variant=\"outline\" className=\"w-48 border-primary text-primary hover:bg-primary/10 hover:text-primary\">\n              Iniciar sesi\u00f3n\n            </Button>\n          </Link>\n        </div>\n      </div>\n    </main>\n  );\n}\n"
        },
        {
          "name": "register",
          "type": "directory",
          "children": [
            {
              "name": "create-property",
              "type": "directory",
              "children": [
                {
                  "name": "page.tsx",
                  "type": "file",
                  "content": "import CreatePropertyForm from '@/components/property/CreatePropertyForm';\n\nexport default function CreatePropertyPage() {\n  return (\n    <main className=\"flex items-center justify-center min-h-screen p-4\">\n      <CreatePropertyForm />\n    </main>\n  );\n}\n"
                }
              ]
            },
            {
              "name": "page.tsx",
              "type": "file",
              "content": "import RegisterForm from '@/components/auth/RegisterForm';\n\nexport default function RegisterPage() {\n  return (\n    <main className=\"flex items-center justify-center min-h-screen p-4\">\n      <RegisterForm />\n    </main>\n  );\n}\n"
            }
          ]
        }
      ]
    },
    {
      "name": "components",
      "type": "directory",
      "children": [
        {
          "name": "auth",
          "type": "directory",
          "children": [
            {
              "name": "ForgotPasswordForm.tsx",
              "type": "file",
              "content": "\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport Link from \"next/link\";\nimport { useState, useTransition } from \"react\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Mail, KeyRound, ArrowLeft } from \"lucide-react\";\nimport { sendPasswordResetLink } from \"@/actions/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst formSchema = z.object({\n  email: z.string().email({ message: \"Por favor, introduce un correo electr\u00f3nico v\u00e1lido.\" }),\n});\n\nexport default function ForgotPasswordForm() {\n  const [isPending, startTransition] = useTransition();\n  const [submitted, setSubmitted] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: \"\",\n    },\n  });\n\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    startTransition(() => {\n      sendPasswordResetLink(values).then(data => {\n        if(data.success) {\n          setSubmitted(true);\n        } else if (data.error) {\n           toast({\n              title: \"Error\",\n              description: data.error,\n              variant: \"destructive\",\n            });\n        }\n      }).catch(() => {\n        toast({\n            title: \"Error\",\n            description: \"Algo sali\u00f3 mal. Por favor, int\u00e9ntalo de nuevo.\",\n            variant: \"destructive\",\n        });\n      })\n    });\n  }\n  \n  if (submitted) {\n    return (\n      <Card className=\"w-full max-w-md border-border/60\">\n        <CardHeader className=\"text-center\">\n          <KeyRound className=\"mx-auto h-12 w-12 text-primary\" />\n          <CardTitle className=\"text-2xl font-headline mt-4\">Revisa tu correo</CardTitle>\n          <CardDescription>\n            Si tu cuenta existe, hemos enviado un enlace para restablecer la contrase\u00f1a a <span className=\"font-medium text-foreground\">{form.getValues(\"email\")}</span>.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n           <Button variant=\"outline\" className=\"w-full\" asChild>\n              <Link href=\"/login\">\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Volver a Iniciar sesi\u00f3n\n              </Link>\n           </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full max-w-md border-border/60\">\n      <CardHeader className=\"text-center\">\n        <CardTitle className=\"text-2xl font-headline\">\u00bfOlvidaste tu contrase\u00f1a?</CardTitle>\n        <CardDescription>\n          No te preocupes, te enviaremos instrucciones para restablecerla.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Correo electr\u00f3nico</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                      <Input placeholder=\"nombre@ejemplo.com\" {...field} className=\"pl-10\" />\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <Button type=\"submit\" className=\"w-full\" disabled={isPending}>\n              {isPending ? \"Enviando...\" : <>\n                <KeyRound className=\"mr-2 h-4 w-4\" />\n                Enviar enlace de restablecimiento\n              </>}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n      <CardFooter className=\"flex justify-center\">\n        <Button variant=\"ghost\" asChild>\n            <Link href=\"/login\">\n              <ArrowLeft className=\"mr-2 h-4 w-4\" />\n              Volver a Iniciar sesi\u00f3n\n            </Link>\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n"
            },
            {
              "name": "LoginForm.tsx",
              "type": "file",
              "content": "\n\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport Link from \"next/link\";\nimport { useTransition } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { LogIn, Mail, Lock } from \"lucide-react\";\nimport { loginUser } from \"@/actions/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst formSchema = z.object({\n  email: z.string().email({ message: \"Por favor, introduce un correo electr\u00f3nico v\u00e1lido.\" }),\n  password: z.string().min(1, { message: \"La contrase\u00f1a es obligatoria.\" }),\n});\n\nexport default function LoginForm() {\n  const [isPending, startTransition] = useTransition();\n  const { toast } = useToast();\n  const router = useRouter();\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    startTransition(() => {\n      loginUser(values)\n        .then((data) => {\n          // @Fix: Use a type guard (`'error' in data`) to correctly narrow the union type.\n          // This ensures we only access `.error` when the error object is returned.\n          if (data && 'error' in data) {\n            toast({\n              title: \"Error de inicio de sesi\u00f3n\",\n              description: data.error,\n              variant: \"destructive\",\n            });\n          }\n          \n          // @Fix: Use a type guard for the success case as well.\n          if (data && 'success' in data) {\n            router.push(data.redirectTo);\n          }\n        });\n    });\n  }\n\n  return (\n    <Card className=\"w-full max-w-md border-border/60\">\n      <CardHeader className=\"text-center\">\n        <CardTitle className=\"text-2xl font-headline\">Bienvenido de nuevo</CardTitle>\n        <CardDescription>Introduce tus credenciales para acceder a tu cuenta.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Correo electr\u00f3nico</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                      <Input placeholder=\"nombre@ejemplo.com\" {...field} className=\"pl-10\" />\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <div className=\"flex items-center justify-between\">\n                    <FormLabel>Contrase\u00f1a</FormLabel>\n                    <Link href=\"/forgot-password\"\n                      className=\"text-sm font-medium text-primary/80 hover:text-primary transition-colors\">\n                      \u00bfOlvidaste la contrase\u00f1a?\n                    </Link>\n                  </div>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                      <Input type=\"password\" placeholder=\"\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\" {...field} className=\"pl-10\" />\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <Button type=\"submit\" className=\"w-full\" disabled={isPending}>\n              {isPending ? \"Iniciando sesi\u00f3n...\" : <>\n                <LogIn className=\"mr-2 h-4 w-4\" />\n                Iniciar sesi\u00f3n\n              </>}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n      <CardFooter className=\"flex justify-center\">\n        <p className=\"text-sm text-muted-foreground\">\n          \u00bfNo tienes una cuenta?{\" \"}\n          <Link href=\"/register\" className=\"font-medium text-primary hover:underline\">\n            Reg\u00edstrate\n          </Link>\n        </p>\n      </CardFooter>\n    </Card>\n  );\n}\n"
            },
            {
              "name": "RegisterForm.tsx",
              "type": "file",
              "content": "\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport Link from \"next/link\";\nimport { useTransition } from \"react\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { User, Mail, Lock, UserPlus } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { registerUser } from \"@/actions/auth\";\nimport { useRouter } from \"next/navigation\";\n\nconst formSchema = z.object({\n  username: z.string().trim().min(3, { message: \"El nombre de usuario debe tener al menos 3 caracteres.\" }),\n  email: z.string().trim().email({ message: \"Por favor, introduce un correo electr\u00f3nico v\u00e1lido.\" }),\n  password: z.string().min(8, { message: \"La contrase\u00f1a debe tener al menos 8 caracteres.\" }),\n  confirmPassword: z.string(),\n}).refine(data => data.password === data.confirmPassword, {\n    message: \"Las contrase\u00f1as no coinciden.\",\n    path: [\"confirmPassword\"],\n});\n\nexport default function RegisterForm() {\n  const [isPending, startTransition] = useTransition();\n  const { toast } = useToast();\n  const router = useRouter();\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    startTransition(() => {\n      registerUser(values)\n        .then((data) => {\n          // @Fix: Use type guards to correctly handle the union return type.\n          if ('error' in data) {\n            toast({\n              title: \"Error de registro\",\n              description: data.error,\n              variant: \"destructive\",\n            });\n          }\n          if ('success' in data && data.success) {\n            toast({\n              title: \"\u00a1Cuenta Creada!\",\n              description: \"Paso 1/2: Ahora, establece tu propiedad inicial.\",\n            });\n            // @Security: Redirect to the next step without exposing any user data in the URL.\n            // The user's session is already active.\n            router.push(`/register/create-property`);\n          }\n        })\n        .catch(() => {\n          toast({\n            title: \"Error\",\n            description: \"Algo sali\u00f3 mal. Por favor, int\u00e9ntalo de nuevo.\",\n            variant: \"destructive\",\n          });\n        });\n    });\n  }\n\n  return (\n    <Card className=\"w-full max-w-md border-border/60\">\n      <CardHeader className=\"text-center\">\n        <CardTitle className=\"text-2xl font-headline\">Crea una cuenta (Paso 1/2)</CardTitle>\n        <CardDescription>Tu viaje en Vendetta Latino comienza aqu\u00ed.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"username\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Nombre de usuario</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <User className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                      <Input placeholder=\"tu_alias\" {...field} className=\"pl-10\" />\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Correo electr\u00f3nico</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                      <Input placeholder=\"nombre@ejemplo.com\" {...field} className=\"pl-10\" />\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Contrase\u00f1a</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                      <Input type=\"password\" placeholder=\"\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\" {...field} className=\"pl-10\" />\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"confirmPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Confirmar contrase\u00f1a</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                      <Input type=\"password\" placeholder=\"\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\" {...field} className=\"pl-10\" />\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <Button type=\"submit\" className=\"w-full\" disabled={isPending}>\n              {isPending ? \"Creando cuenta...\" : <>\n                <UserPlus className=\"mr-2 h-4 w-4\" />\n                Siguiente Paso\n              </>}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n      <CardFooter className=\"flex justify-center\">\n        <p className=\"text-sm text-muted-foreground\">\n          \u00bfYa tienes una cuenta?{\" \"}\n          <Link href=\"/login\" className=\"font-medium text-primary hover:underline\">\n            Inicia sesi\u00f3n\n          </Link>\n        </p>\n      </CardFooter>\n    </Card>\n  );\n}\n"
            }
          ]
        },
        {
          "name": "dashboard",
          "type": "directory",
          "children": [
            {
              "name": "StatsBar.tsx",
              "type": "file",
              "content": "import { Card } from \"@/components/ui/card\";\nimport type { PlayerProfile, Propiedad } from \"@prisma/client\";\nimport type { Serialized } from \"@/lib/serialize\";\n\n// The PlayerProfile prop is of a serialized type because it's passed from a\n// Server Component to this component, and its BigInt fields need to be\n// converted to strings to avoid runtime errors.\ninterface StatsBarProps {\n  playerProfile: Serialized<PlayerProfile> | null;\n  properties: Propiedad[] | undefined;\n}\n\nexport function StatsBar({ playerProfile, properties }: StatsBarProps) {\n  // @Fix: The \"Edificios\" stat should reflect the total number of properties\n  // a player owns, not the sum of building levels.\n  const propertyCount = properties?.length ?? 0;\n\n  return (\n    <Card className=\"p-4\">\n      <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4 text-center\">\n        <div className=\"md:border-r md:border-border md:pr-4\">\n          <p className=\"text-xs text-muted-foreground\">Puntos (Entrenamiento)</p>\n          <p className=\"text-lg font-bold\">\n            {Number(playerProfile?.puntos_entrenamiento || 0).toLocaleString()}\n          </p>\n        </div>\n        <div className=\"md:border-r md:border-border md:pr-4\">\n          <p className=\"text-xs text-muted-foreground\">Puntos (Edificios)</p>\n          <p className=\"text-lg font-bold\">\n            {Number(playerProfile?.puntos_edificios || 0).toLocaleString()}\n          </p>\n        </div>\n        <div className=\"md:border-r md:border-border md:pr-4\">\n          <p className=\"text-xs text-muted-foreground\">Puntos (Tropas)</p>\n          <p className=\"text-lg font-bold\">\n            {Number(playerProfile?.puntos_tropas || 0).toLocaleString()}\n          </p>\n        </div>\n        <div className=\"md:border-r md:border-border md:pr-4\">\n          <p className=\"text-xs text-muted-foreground\">Edificios</p>\n          <p className=\"text-lg font-bold\">{propertyCount}</p>\n        </div>\n        <div className=\"col-span-2 md:col-span-1 border-t-2 border-border pt-4 mt-4 md:border-t-0 md:border-l-2 md:pt-0 md:mt-0 md:pl-4\">\n          <p className=\"text-xs text-muted-foreground\">Lealtad</p>\n          <p className=\"text-lg font-bold\">{playerProfile?.lealtad || 100}%</p>\n        </div>\n      </div>\n    </Card>\n  );\n}\n"
            },
            {
              "name": "StatsCard.tsx",
              "type": "file",
              "content": "import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport type { LucideIcon } from \"lucide-react\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string;\n  description: string;\n  Icon: LucideIcon;\n}\n\nexport default function StatsCard({ title, value, description, Icon }: StatsCardProps) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <Icon className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">{value}</div>\n        <p className=\"text-xs text-muted-foreground\">{description}</p>\n      </CardContent>\n    </Card>\n  );\n}\n"
            }
          ]
        },
        {
          "name": "farms",
          "type": "directory",
          "children": [
            {
              "name": "FarmsView.tsx",
              "type": "file",
              "content": "import {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Construction } from \"lucide-react\";\n\nexport default function FarmsView() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <Construction className=\"h-6 w-6 text-primary\" />\n            <div>\n              <CardTitle>Lista de Granjas</CardTitle>\n              <CardDescription>\n                Este m\u00f3dulo est\u00e1 actualmente en construcci\u00f3n.\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground\">Vuelve pronto para ver las nuevas funcionalidades.</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"
            }
          ]
        },
        {
          "name": "layout",
          "type": "directory",
          "children": [
            {
              "name": "Header.tsx",
              "type": "file",
              "content": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { Clock } from 'lucide-react';\nimport Image from 'next/image';\nimport type { User, PlayerResources } from '@prisma/client';\n\n// The user object passed here comes from `getCurrentUser`, which omits the password.\n// We use Omit<User, 'pass'> to accurately type this object.\ntype UserWithResources = Omit<User, 'pass'> & { recursos: PlayerResources | null };\n\nexport default function Header({ user }: { user: UserWithResources }) {\n  const resources = user.recursos;\n  const [currentTime, setCurrentTime] = useState('');\n\n  useEffect(() => {\n    // This effect runs only on the client, after hydration, avoiding a mismatch.\n    const timer = setInterval(() => {\n      setCurrentTime(new Date().toLocaleString('es-ES', {\n        dateStyle: 'short',\n        timeStyle: 'medium',\n      }));\n    }, 1000); // Update every second\n\n    // Cleanup interval on component unmount\n    return () => clearInterval(timer);\n  }, []); // Empty dependency array ensures this runs once on mount\n\n  return (\n    <header className=\"sticky top-0 z-10 flex h-16 items-center justify-between gap-4 border-b bg-background px-4 sm:px-6\">\n       <SidebarTrigger className=\"md:hidden\" />\n       \n       <div className=\"flex-1\"></div>\n\n       <div className=\"flex flex-wrap items-center justify-end gap-x-4 gap-y-2 lg:gap-x-6 text-sm font-medium text-foreground\">\n         \n         <div className=\"flex items-center gap-2\">\n           <Image src=\"/img/recursos/armas.svg\" alt=\"Armas\" width={20} height={20} />\n           <span className=\"hidden sm:inline\">ARMAS</span>\n           <span className=\"font-bold text-primary\">{(Number(resources?.armas) || 0).toLocaleString()}</span>\n         </div>\n         \n         <div className=\"flex items-center gap-2\">\n           <Image src=\"/img/recursos/municion.svg\" alt=\"Munici\u00f3n\" width={20} height={20} />\n           <span className=\"hidden sm:inline\">MUNICION</span>\n           <span className=\"font-bold text-primary\">{(Number(resources?.municion) || 0).toLocaleString()}</span>\n         </div>\n\n         <div className=\"flex items-center gap-2\">\n           <Image src=\"/img/recursos/alcohol.svg\" alt=\"Alcohol\" width={16} height={16} />\n           <span className=\"hidden sm:inline\">ALCOHOL</span>\n           <span className=\"font-bold text-primary\">{(Number(resources?.alcohol) || 0).toLocaleString()}</span>\n         </div>\n\n         <div className=\"flex items-center gap-2\">\n           <Image src=\"/img/recursos/dolares.svg\" alt=\"D\u00f3lares\" width={20} height={20} />\n           <span className=\"hidden sm:inline\">DOLARES</span>\n           <span className=\"font-bold text-primary\">{(Number(resources?.dolares) || 0).toLocaleString()}</span>\n         </div>\n\n         <div className=\"hidden lg:flex items-center gap-2 bg-primary/10 px-3 py-1 rounded-md\">\n           <Clock className=\"h-5 w-5 text-primary\" />\n           <span className=\"font-bold\">{currentTime || '...'}</span>\n         </div>\n       </div>\n    </header>\n  );\n}\n"
            },
            {
              "name": "Sidebar.tsx",
              "type": "file",
              "content": "\"use client\";\n\nimport Link from \"next/link\";\nimport {\n  Home,\n  BedDouble,\n  UserPlus,\n  Shield,\n  Target,\n  Building,\n  Search,\n  FlaskConical,\n  Users,\n  Coins,\n  Map,\n  ClipboardList,\n  Calculator,\n  List,\n  Mail,\n  BarChart,\n  Trophy,\n  MessageSquare,\n  MessagesSquare,\n  ScrollText,\n  Settings,\n  LogOut,\n} from \"lucide-react\";\n\nimport { logoutUser } from \"@/actions/auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Sidebar as ShadcnSidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarHeader,\n  SidebarTrigger,\n  SidebarMenu,\n  SidebarMenuItem,\n  SidebarMenuButton,\n  useSidebar,\n} from \"@/components/ui/sidebar\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport type { Propiedad } from \"@prisma/client\";\n\nexport default function Sidebar({ properties }: { properties: Propiedad[] }) {\n  const { setOpenMobile } = useSidebar();\n  \n  const handleLinkClick = () => {\n    setOpenMobile(false);\n  };\n\n  const menuItems1 = [\n    { href: \"/dashboard\", label: \"Visi\u00f3n General\", Icon: Home },\n    { href: \"/dashboard/rooms\", label: \"Habitaciones\", Icon: BedDouble },\n    { href: \"/dashboard/recruitment\", label: \"Reclutamiento\", Icon: UserPlus },\n    { href: \"/dashboard/security\", label: \"Seguridad\", Icon: Shield },\n    { href: \"/dashboard/training\", label: \"Entrenamiento\", Icon: Target },\n    { href: \"/dashboard/buildings\", label: \"Edificios\", Icon: Building },\n    { href: \"/dashboard/search\", label: \"Buscar\", Icon: Search },\n  ];\n\n  const menuItems2 = [\n    { href: \"/dashboard/technologies\", label: \"Tecnolog\u00edas\", Icon: FlaskConical },\n    { href: \"/dashboard/family\", label: \"Familia\", Icon: Users },\n    { href: \"/dashboard/resources\", label: \"Recursos\", Icon: Coins },\n    { href: \"/dashboard/map\", label: \"Mapa\", Icon: Map },\n    { href: \"/dashboard/missions\", label: \"Misiones\", Icon: ClipboardList },\n    { href: \"/dashboard/simulator\", label: \"Simulador\", Icon: Calculator },\n    { href: \"/dashboard/farms\", label: \"Lista de granjas\", Icon: List },\n    { href: \"/dashboard/messages\", label: \"Mensajes\", Icon: Mail },\n    { href: \"/dashboard/stats\", label: \"Estad\u00edsticas\", Icon: BarChart },\n    { href: \"/dashboard/rankings\", label: \"Clasificaciones\", Icon: Trophy },\n  ];\n\n  const menuItems3 = [\n    { href: \"/dashboard/chat\", label: \"Chat\", Icon: MessageSquare },\n    { href: \"/dashboard/forum\", label: \"Foro\", Icon: MessagesSquare },\n    { href: \"/dashboard/rules\", label: \"Reglas\", Icon: ScrollText },\n    { href: \"/dashboard/options\", label: \"Opciones\", Icon: Settings },\n  ];\n\n  return (\n    <ShadcnSidebar>\n      <SidebarHeader className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold font-headline text-primary\">VENDETTA</h2>\n        <SidebarTrigger className=\"hidden md:flex\" />\n      </SidebarHeader>\n      <SidebarContent className=\"p-0\">\n        <ScrollArea className=\"h-full\">\n          <div className=\"p-2 pt-0\">\n            <div className=\"bg-primary text-primary-foreground text-center font-bold py-2 rounded-md\">\n                MENU\n            </div>\n          </div>\n          <SidebarMenu className=\"px-2\">\n              {menuItems1.map((item) => (\n                  <SidebarMenuItem key={item.label}>\n                      <SidebarMenuButton asChild className=\"w-full justify-start\" onClick={handleLinkClick}>\n                          <Link href={item.href}>\n                              <item.Icon className=\"h-4 w-4\" />\n                              <span>{item.label}</span>\n                          </Link>\n                      </SidebarMenuButton>\n                  </SidebarMenuItem>\n              ))}\n          </SidebarMenu>\n          \n          <Separator className=\"my-4 bg-primary\" />\n\n          <div className=\"px-4 mb-4\">\n               <Select defaultValue={properties[0]?.id_propiedad.toString()}>\n                  <SelectTrigger className=\"w-full\">\n                      <SelectValue placeholder=\"Seleccionar propiedad\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                     {properties.length > 0 ? (\n                        properties.map((prop) => (\n                           <SelectItem key={prop.id_propiedad} value={prop.id_propiedad.toString()}>\n                             {`${prop.nombre} [${prop.coord_x}:${prop.coord_y}:${prop.coord_z}]`}\n                           </SelectItem>\n                        ))\n                      ) : (\n                        <SelectItem value=\"none\" disabled>No tienes propiedades</SelectItem>\n                      )}\n                  </SelectContent>\n              </Select>\n          </div>\n\n          <SidebarMenu className=\"px-2\">\n              {menuItems2.map((item) => (\n                  <SidebarMenuItem key={item.label}>\n                       <SidebarMenuButton asChild className=\"w-full justify-start\" onClick={handleLinkClick}>\n                          <Link href={item.href}>\n                              <item.Icon className=\"h-4 w-4\" />\n                              <span>{item.label}</span>\n                          </Link>\n                      </SidebarMenuButton>\n                  </SidebarMenuItem>\n              ))}\n          </SidebarMenu>\n\n          <Separator className=\"my-4 bg-primary\" />\n\n          <SidebarMenu className=\"px-2 pb-4\">\n              {menuItems3.map((item) => (\n                  <SidebarMenuItem key={item.label}>\n                       <SidebarMenuButton asChild className=\"w-full justify-start\" onClick={handleLinkClick}>\n                          <Link href={item.href}>\n                              <item.Icon className=\"h-4 w-4\" />\n                              <span>{item.label}</span>\n                          </Link>\n                      </SidebarMenuButton>\n                  </SidebarMenuItem>\n              ))}\n          </SidebarMenu>\n        </ScrollArea>\n      </SidebarContent>\n      <SidebarFooter>\n        <form action={logoutUser}>\n          <Button type=\"submit\" variant=\"outline\" className=\"w-full\">\n            <LogOut className=\"mr-2 h-4 w-4\" />\n            Logout\n          </Button>\n        </form>\n      </SidebarFooter>\n    </ShadcnSidebar>\n  );\n}\n"
            }
          ]
        },
        {
          "name": "map",
          "type": "directory",
          "children": [
            {
              "name": "MapGrid.tsx",
              "type": "file",
              "content": "'use client';\n\nimport { useMemo } from 'react';\nimport type { Propiedad, User } from '@prisma/client';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { cn } from '@/lib/utils';\nimport { Home, User as UserIcon } from 'lucide-react';\n\n// Define the type for properties with the included user data\ntype PropertyWithUser = Propiedad & {\n  usuario: {\n    id_usuario: number;\n    usuario: string;\n  } | null;\n};\n\n// Define the type for the current user, omitting the password hash\ntype CurrentUser = Omit<User, 'pass'>;\n\n\ninterface MapGridProps {\n  properties: PropertyWithUser[];\n  currentUser: CurrentUser;\n  currentSector: number;\n}\n\nconst MAP_SIZE = 50; // As per the schema (1-50)\n\nexport function MapGrid({ properties, currentUser, currentSector }: MapGridProps) {\n  // Memoize the properties map for efficient lookups\n  const propertiesMap = useMemo(() => {\n    const map = new Map<string, PropertyWithUser>();\n    properties.forEach((prop) => {\n      map.set(`${prop.coord_x}-${prop.coord_y}`, prop);\n    });\n    return map;\n  }, [properties]);\n\n  const cells = [];\n  for (let y = 1; y <= MAP_SIZE; y++) {\n    for (let x = 1; x <= MAP_SIZE; x++) {\n      const property = propertiesMap.get(`${x}-${y}`);\n      const cellKey = `${x}-${y}`;\n      const isCurrentUserProperty = property?.id_usuario === currentUser.id_usuario;\n\n      cells.push(\n        <Tooltip key={cellKey}>\n          <TooltipTrigger asChild>\n            <div\n              className={cn(\n                'flex aspect-square items-center justify-center border border-dashed border-white/10 transition-colors',\n                 isCurrentUserProperty\n                  ? 'bg-green-500/50 hover:bg-green-500/70 cursor-pointer ring-2 ring-green-400'\n                  : property\n                  ? 'bg-primary/50 hover:bg-primary/70 cursor-pointer'\n                  : 'bg-muted/20 hover:bg-muted/40' \n              )}\n            >\n              {property && <Home className=\"h-2/5 w-2/5 text-primary-foreground\" />}\n            </div>\n          </TooltipTrigger>\n          <TooltipContent>\n            <div className=\"flex flex-col gap-1 p-1\">\n              <p className=\"font-bold\">Coordenadas: [{x}:{y}:{property?.coord_z ?? currentSector}]</p>\n              {property && property.usuario ? (\n                <>\n                  <p className=\"text-sm\">\n                    <UserIcon className=\"inline-block h-4 w-4 mr-1\" />\n                    Propietario: <span className=\"font-semibold\">{property.usuario.usuario}</span>\n                  </p>\n                  <p className=\"text-sm\">\n                    <Home className=\"inline-block h-4 w-4 mr-1\" />\n                    Propiedad: <span className=\"font-semibold\">{property.nombre}</span>\n                  </p>\n                </>\n              ) : (\n                <p className=\"text-sm text-muted-foreground\">Este solar est\u00e1 libre.</p>\n              )}\n            </div>\n          </TooltipContent>\n        </Tooltip>\n      );\n    }\n  }\n\n  return (\n    <TooltipProvider>\n      <div \n        className=\"grid bg-background rounded-md border\"\n        style={{ gridTemplateColumns: `repeat(${MAP_SIZE}, minmax(0, 1fr))` }}\n      >\n        {cells}\n      </div>\n    </TooltipProvider>\n  );\n}\n"
            }
          ]
        },
        {
          "name": "missions",
          "type": "directory",
          "children": [
            {
              "name": "MissionsView.tsx",
              "type": "file",
              "content": "import {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Construction } from \"lucide-react\";\n\nexport default function MissionsView() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <Construction className=\"h-6 w-6 text-primary\" />\n            <div>\n              <CardTitle>Misiones</CardTitle>\n              <CardDescription>\n                Este m\u00f3dulo est\u00e1 actualmente en construcci\u00f3n.\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground\">Vuelve pronto para ver las nuevas funcionalidades.</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"
            }
          ]
        },
        {
          "name": "property",
          "type": "directory",
          "children": [
            {
              "name": "CreatePropertyForm.tsx",
              "type": "file",
              "content": "\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\nimport { useTransition } from \"react\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { MapPin, Globe, Satellite, Anchor, Home } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { createInitialProperty } from \"@/actions/property\";\n\n// @Fix: This schema validates form inputs as strings. The robust numeric validation\n// (min/max range) is handled by the server action's schema. This resolves\n// the type mismatch with defaultValues.\nconst formSchema = z.object({\n  name: z.string().trim().min(3, {message: \"Debe tener al menos 3 caracteres.\"}).default(\"Propiedad Principal\"),\n  coordX: z.string().min(1, { message: \"La coordenada X es requerida.\"}),\n  coordY: z.string().min(1, { message: \"La coordenada Y es requerida.\"}),\n  coordZ: z.string().min(1, { message: \"El Sector Z es requerido.\"}),\n});\n\n\nexport default function CreatePropertyForm() {\n  const [isPending, startTransition] = useTransition();\n  const { toast } = useToast();\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    // Initialize number fields with an empty string to avoid uncontrolled input errors.\n    defaultValues: {\n      name: \"Propiedad Principal\",\n      coordX: \"\",\n      coordY: \"\",\n      coordZ: \"\",\n    },\n  });\n\n  function onSubmit(values: z.infer<typeof formSchema>) {\n    startTransition(() => {\n        // @Security: The action now gets the user ID from the secure session,\n        // and handles its own validation and coercion from string to number.\n        createInitialProperty(values)\n            .then((data) => {\n                // If the action returns a value, it's always an error object.\n                // A successful action results in a redirect, which doesn't resolve here.\n                if (data?.error) {\n                    form.setError(\"root\", { message: data.error });\n                    toast({\n                        title: \"Error al crear la propiedad\",\n                        description: data.error,\n                        variant: \"destructive\",\n                    });\n                }\n            })\n            .catch(() => {\n                toast({\n                    title: \"Error\",\n                    description: \"Algo sali\u00f3 mal. Por favor, int\u00e9ntalo de nuevo.\",\n                    variant: \"destructive\",\n                });\n            });\n    });\n  }\n\n  return (\n    <Card className=\"w-full max-w-lg border-border/60\">\n      <CardHeader className=\"text-center\">\n        <MapPin className=\"mx-auto h-12 w-12 text-primary\" />\n        <CardTitle className=\"text-2xl font-headline mt-4\">Establece tu Propiedad Inicial (Paso 2/2)</CardTitle>\n        <CardDescription>\n          Elige un nombre y las coordenadas para tu primera base de operaciones. Esta ser\u00e1 tu fortaleza.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n             <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"flex items-center gap-2\"><Home className=\"h-4 w-4\" /> Nombre de tu Propiedad</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Input placeholder=\"Ej: El Escondite\" {...field} />\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                 <FormField\n                  control={form.control}\n                  name=\"coordX\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\"><Globe className=\"h-4 w-4\" /> Coordenada X</FormLabel>\n                      <FormControl>\n                          <Input type=\"number\" placeholder=\"1-50\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                 <FormField\n                  control={form.control}\n                  name=\"coordY\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\"><Globe className=\"h-4 w-4\" /> Coordenada Y</FormLabel>\n                      <FormControl>\n                          <Input type=\"number\" placeholder=\"1-50\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                 <FormField\n                  control={form.control}\n                  name=\"coordZ\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\"><Satellite className=\"h-4 w-4\" /> Sector Z</FormLabel>\n                      <FormControl>\n                          <Input type=\"number\" placeholder=\"1-255\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n            </div>\n            {form.formState.errors.root && (\n                 <p className=\"text-sm font-medium text-destructive\">{form.formState.errors.root.message}</p>\n            )}\n            <Button type=\"submit\" className=\"w-full !mt-8\" disabled={isPending}>\n              {isPending ? \"Fundando...\" : <>\n                <Anchor className=\"mr-2 h-4 w-4\" />\n                Fundar y Finalizar\n              </>}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n"
            }
          ]
        },
        {
          "name": "rankings",
          "type": "directory",
          "children": [
            {
              "name": "RankingsHeader.tsx",
              "type": "file",
              "content": "\nimport { CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Trophy } from \"lucide-react\";\n\nexport function RankingsHeader() {\n  return (\n    <CardHeader>\n      <div className=\"flex items-center gap-3\">\n        <Trophy className=\"h-6 w-6 text-primary\" />\n        <div>\n          <CardTitle>Clasificaciones Globales</CardTitle>\n          <CardDescription>\n            Compite por ser el jugador m\u00e1s poderoso.\n          </CardDescription>\n        </div>\n      </div>\n    </CardHeader>\n  );\n}\n"
            },
            {
              "name": "RankingsTable.tsx",
              "type": "file",
              "content": "\nimport { Table, TableBody, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { RankingsTableRow, type RankedPlayer } from \"./RankingsTableRow\";\nimport type { User } from \"@prisma/client\";\n\ntype CurrentUser = Omit<User, 'pass'>;\n\ninterface RankingsTableProps {\n  rankedPlayers: RankedPlayer[];\n  currentUser: CurrentUser;\n}\n\nexport function RankingsTable({ rankedPlayers, currentUser }: RankingsTableProps) {\n  return (\n    <div className=\"relative w-full overflow-auto\">\n       <Table>\n          <TableHeader>\n              <TableRow>\n                  <TableHead className=\"w-[50px] text-center\">#</TableHead>\n                  <TableHead>Nombre</TableHead>\n                  <TableHead className=\"text-right hidden md:table-cell\">Puntos (Entren.)</TableHead>\n                  <TableHead className=\"text-right hidden md:table-cell\">Puntos (Edificios)</TableHead>\n                  <TableHead className=\"text-right hidden md:table-cell\">Puntos (Tropas)</TableHead>\n                  <TableHead className=\"text-right\">Suma Total</TableHead>\n                  <TableHead className=\"text-right hidden sm:table-cell\">Edificios</TableHead>\n              </TableRow>\n          </TableHeader>\n          <TableBody>\n              {rankedPlayers.map((player, index) => (\n                  <RankingsTableRow \n                      key={player.id_usuario}\n                      player={player}\n                      rank={index + 1}\n                      isCurrentUser={player.id_usuario === currentUser.id_usuario}\n                  />\n              ))}\n          </TableBody>\n       </Table>\n    </div>\n  );\n}\n"
            },
            {
              "name": "RankingsTableRow.tsx",
              "type": "file",
              "content": "\nimport { TableCell, TableRow } from \"@/components/ui/table\";\nimport { cn } from \"@/lib/utils\";\nimport type { User, Family, PlayerProfile } from \"@prisma/client\";\n\nexport type RankedPlayer = User & {\n    familia: Family | null;\n    perfil: PlayerProfile | null;\n    _count: {\n        propiedades: number;\n    };\n    totalPoints: number;\n};\n\ninterface RankingsTableRowProps {\n  player: RankedPlayer;\n  rank: number;\n  isCurrentUser: boolean;\n}\n\nexport function RankingsTableRow({ player, rank, isCurrentUser }: RankingsTableRowProps) {\n  if (!player.perfil) return null;\n\n  return (\n    <TableRow \n        key={player.id_usuario} \n        className={cn(isCurrentUser && 'bg-primary/10 font-bold text-primary-foreground')}\n    >\n        <TableCell className=\"text-center\">{rank}</TableCell>\n        <TableCell>\n            {player.usuario}\n            {player.familia && <span className=\"ml-1 text-muted-foreground\">{`[${player.familia.tag}]`}</span>}\n        </TableCell>\n        <TableCell className=\"text-right hidden md:table-cell\">\n            {player.perfil.puntos_entrenamiento.toLocaleString('es-ES')}\n        </TableCell>\n        <TableCell className=\"text-right hidden md:table-cell\">\n            {player.perfil.puntos_edificios.toLocaleString('es-ES')}\n        </TableCell>\n        <TableCell className=\"text-right hidden md:table-cell\">\n            {player.perfil.puntos_tropas.toLocaleString('es-ES')}\n        </TableCell>\n        <TableCell className=\"text-right\">\n            {player.totalPoints.toLocaleString('es-ES')}\n        </TableCell>\n        <TableCell className=\"text-right hidden sm:table-cell\">\n            {player._count.propiedades}\n        </TableCell>\n    </TableRow>\n  );\n}\n"
            }
          ]
        },
        {
          "name": "resources",
          "type": "directory",
          "children": [
            {
              "name": "ResourcesView.tsx",
              "type": "file",
              "content": "import {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Construction } from \"lucide-react\";\n\nexport default function ResourcesView() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <Construction className=\"h-6 w-6 text-primary\" />\n            <div>\n              <CardTitle>Recursos</CardTitle>\n              <CardDescription>\n                Este m\u00f3dulo est\u00e1 actualmente en construcci\u00f3n.\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground\">Vuelve pronto para ver las nuevas funcionalidades.</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"
            }
          ]
        },
        {
          "name": "search",
          "type": "directory",
          "children": [
            {
              "name": "SearchView.tsx",
              "type": "file",
              "content": "import {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Construction } from \"lucide-react\";\n\nexport default function SearchView() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <Construction className=\"h-6 w-6 text-primary\" />\n            <div>\n              <CardTitle>Buscar</CardTitle>\n              <CardDescription>\n                Este m\u00f3dulo est\u00e1 actualmente en construcci\u00f3n.\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground\">Vuelve pronto para ver las nuevas funcionalidades.</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"
            }
          ]
        },
        {
          "name": "simulator",
          "type": "directory",
          "children": [
            {
              "name": "SimulatorView.tsx",
              "type": "file",
              "content": "import {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Construction } from \"lucide-react\";\n\nexport default function SimulatorView() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <Construction className=\"h-6 w-6 text-primary\" />\n            <div>\n              <CardTitle>Simulador</CardTitle>\n              <CardDescription>\n                Este m\u00f3dulo est\u00e1 actualmente en construcci\u00f3n.\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground\">Vuelve pronto para ver las nuevas funcionalidades.</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"
            }
          ]
        },
        {
          "name": "stats",
          "type": "directory",
          "children": [
            {
              "name": "StatsView.tsx",
              "type": "file",
              "content": "import {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Construction } from \"lucide-react\";\n\nexport default function StatsView() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <Construction className=\"h-6 w-6 text-primary\" />\n            <div>\n              <CardTitle>Estad\u00edsticas</CardTitle>\n              <CardDescription>\n                Este m\u00f3dulo est\u00e1 actualmente en construcci\u00f3n.\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground\">Vuelve pronto para ver las nuevas funcionalidades.</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"
            }
          ]
        },
        {
          "name": "technologies",
          "type": "directory",
          "children": [
            {
              "name": "TechnologiesView.tsx",
              "type": "file",
              "content": "import {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Construction } from \"lucide-react\";\n\nexport default function TechnologiesView() {\n  return (\n    <div className=\"flex flex-col gap-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-3\">\n            <Construction className=\"h-6 w-6 text-primary\" />\n            <div>\n              <CardTitle>Tecnolog\u00edas</CardTitle>\n              <CardDescription>\n                Este m\u00f3dulo est\u00e1 actualmente en construcci\u00f3n.\n              </CardDescription>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground\">Vuelve pronto para ver las nuevas funcionalidades.</p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"
            }
          ]
        },
        {
          "name": "ui",
          "type": "directory",
          "children": [
            {
              "name": "accordion.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n"
            },
            {
              "name": "alert-dialog.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n"
            },
            {
              "name": "alert.tsx",
              "type": "file",
              "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n"
            },
            {
              "name": "avatar.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n"
            },
            {
              "name": "badge.tsx",
              "type": "file",
              "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"
            },
            {
              "name": "button.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 hover:scale-[1.04] active:scale-[0.98]\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"
            },
            {
              "name": "calendar.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n"
            },
            {
              "name": "card.tsx",
              "type": "file",
              "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm transition-all duration-300 hover:shadow-lg hover:border-primary/20\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"
            },
            {
              "name": "carousel.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Diapositiva anterior</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Siguiente diapositiva</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n"
            },
            {
              "name": "chart.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n"
            },
            {
              "name": "checkbox.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n"
            },
            {
              "name": "collapsible.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n"
            },
            {
              "name": "dialog.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Cerrar</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n"
            },
            {
              "name": "dropdown-menu.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n"
            },
            {
              "name": "form.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"
            },
            {
              "name": "input.tsx",
              "type": "file",
              "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"
            },
            {
              "name": "label.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"
            },
            {
              "name": "menubar.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n"
            },
            {
              "name": "popover.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n"
            },
            {
              "name": "progress.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n"
            },
            {
              "name": "radio-group.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n"
            },
            {
              "name": "scroll-area.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n"
            },
            {
              "name": "select.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"
            },
            {
              "name": "separator.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n"
            },
            {
              "name": "sheet.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n"
            },
            {
              "name": "sidebar.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\nimport { VisuallyHidden } from \"@radix-ui/react-visually-hidden\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <VisuallyHidden>\n              <SheetTitle>Barra lateral</SheetTitle>\n              <SheetDescription>\n                Navegaci\u00f3n principal de la aplicaci\u00f3n\n              </SheetDescription>\n            </VisuallyHidden>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Alternar barra lateral</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Alternar barra lateral\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Alternar barra lateral\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n"
            },
            {
              "name": "skeleton.tsx",
              "type": "file",
              "content": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n"
            },
            {
              "name": "slider.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n"
            },
            {
              "name": "switch.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n"
            },
            {
              "name": "table.tsx",
              "type": "file",
              "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"
            },
            {
              "name": "tabs.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n"
            },
            {
              "name": "textarea.tsx",
              "type": "file",
              "content": "import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"
            },
            {
              "name": "toast.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n"
            },
            {
              "name": "toaster.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n"
            },
            {
              "name": "tooltip.tsx",
              "type": "file",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n"
            }
          ]
        }
      ]
    },
    {
      "name": "hooks",
      "type": "directory",
      "children": [
        {
          "name": "use-mobile.tsx",
          "type": "file",
          "content": "import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n"
        },
        {
          "name": "use-toast.ts",
          "type": "file",
          "content": "\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n"
        }
      ]
    },
    {
      "name": "lib",
      "type": "directory",
      "children": [
        {
          "name": "auth.ts",
          "type": "file",
          "content": "import 'server-only';\n// @BestPractice: No se utiliza 'cache' aqu\u00ed porque interfiere con la naturaleza\n// din\u00e1mica de `cookies()` durante el flujo de autenticaci\u00f3n, causando que se\n// lea un estado de sesi\u00f3n obsoleto.\nimport { getSession } from '@/lib/session';\nimport prisma from '@/lib/prisma';\nimport { redirect } from 'next/navigation';\n\nexport interface SessionPayload {\n  userId: number;\n  expires?: Date;\n}\n\n// @BestPractice: Se elimina el `cache` para asegurar que siempre se obtenga la sesi\u00f3n m\u00e1s reciente.\n// Esto es crucial para flujos como login/register donde la sesi\u00f3n cambia en la misma petici\u00f3n.\nexport const getCurrentUser = async () => {\n  const session = await getSession();\n  if (!session?.userId) {\n    return null;\n  }\n\n  const user = await prisma.user.findUnique({\n    where: { id_usuario: session.userId },\n    // @BestPractice: Include related data needed for the authenticated layout\n    // in a single query to avoid waterfalls.\n    include: {\n      familia: true,\n      perfil: {\n        include: {\n          // @New: Eager load the player's progress with their profile.\n          trainings: true,\n          recruitments: true,\n          securities: true,\n        }\n      },\n      propiedades: true,\n      recursos: true,\n    },\n  });\n\n  if (!user) {\n    return null;\n  }\n\n  // @Security: Crucially, never send the password hash to the client.\n  const { pass, ...userWithoutPassword } = user;\n  return userWithoutPassword;\n};\n\n/**\n * @description A helper function to protect server-side rendered pages.\n * It checks for a valid session and redirects to '/login' if not found.\n * @returns The user object if the session is valid.\n */\nexport async function protectPage() {\n    const user = await getCurrentUser();\n    if (!user) {\n        redirect('/login');\n    }\n    return user;\n}\n\n/**\n * @description A helper function to protect Server Actions.\n * It checks for a valid session and throws an error if not found.\n * This is essential for preventing unauthorized mutations.\n * @returns The user object if the session is valid.\n */\nexport async function protectAction() {\n    const user = await getCurrentUser();\n    if (!user) {\n        throw new Error('No autorizado: El usuario debe iniciar sesi\u00f3n.');\n    }\n    return user;\n}\n"
        },
        {
          "name": "constants.ts",
          "type": "file",
          "content": "import type { Propiedad } from \"@prisma/client\";\n\n// @BestPractice: Centralize the mapping between building names and their\n// corresponding database fields. This avoids duplication and makes the code\n// easier to maintain.\nexport const buildingFieldMap: Record<string, keyof Propiedad> = {\n  'Oficina del Jefe': 'oficina',\n  'Escuela de especializaci\u00f3n': 'escuela',\n  'Armer\u00eda': 'armeria',\n  'Almac\u00e9n de munici\u00f3n': 'municion',\n  'Cervecer\u00eda': 'cerveceria',\n  'Taberna': 'taberna',\n  'Contrabando': 'contrabando',\n  'Almac\u00e9n de armas': 'almacenArm',\n  'Dep\u00f3sito de munici\u00f3n': 'deposito',\n  'Almac\u00e9n de alcohol': 'almacenAlc',\n  'Caja fuerte': 'caja',\n  'Campo de entrenamiento': 'campo',\n  'Seguridad': 'seguridad',\n  'Torreta de fuego autom\u00e1tico': 'torreta',\n  'Minas ocultas': 'minas',\n};\n"
        },
        {
          "name": "prisma.ts",
          "type": "file",
          "content": "import { PrismaClient } from '@prisma/client'\nimport { withAccelerate } from '@prisma/extension-accelerate'\n\nconst prismaClientSingleton = () => {\n  return new PrismaClient().$extends(withAccelerate())\n}\n\ndeclare global {\n  var prisma: undefined | ReturnType<typeof prismaClientSingleton>\n}\n\nconst prisma = globalThis.prisma ?? prismaClientSingleton()\n\nexport default prisma\n\nif (process.env.NODE_ENV !== 'production') globalThis.prisma = prisma\n"
        },
        {
          "name": "serialize.ts",
          "type": "file",
          "content": "/**\n * A helper function to safely serialize data that contains BigInts or other\n * non-serializable types by converting them to strings. This is essential when\n * passing data from Server Components to Client Components.\n * @param obj The object to serialize.\n * @returns A new object with BigInts converted to strings.\n */\n\n// A generic type to represent an object that has been serialized.\n// It converts types that are not JSON-safe (like BigInt) into strings.\nexport type Serialized<T> = {\n  [P in keyof T]: T[P] extends bigint ? string : T[P];\n};\n\nexport function safeSerialize<T>(obj: T): Serialized<T> {\n  return JSON.parse(\n    JSON.stringify(\n      obj,\n      (key, value) => (typeof value === 'bigint' ? value.toString() : value)\n    )\n  );\n}\n"
        },
        {
          "name": "session.ts",
          "type": "file",
          "content": "import 'server-only';\nimport { SignJWT, jwtVerify } from 'jose';\nimport { cookies } from 'next/headers';\nimport type { SessionPayload } from '@/lib/auth';\n\nconst secretKey = process.env.SESSION_SECRET;\nconst encodedKey = new TextEncoder().encode(secretKey);\n\nexport async function encrypt(payload: any) {\n  // @Security: Use a strong algorithm like HS256 for signing the JWT.\n  return await new SignJWT(payload)\n    .setProtectedHeader({ alg: 'HS256' })\n    .setIssuedAt()\n    .setExpirationTime('7d')\n    .sign(encodedKey);\n}\n\nexport async function decrypt(input: string): Promise<any> {\n  try {\n    const { payload } = await jwtVerify(input, encodedKey, {\n      algorithms: ['HS256'],\n    });\n    return payload;\n  } catch (error) {\n    // @Security: Gracefully handle token verification errors (e.g., expired, invalid signature).\n    console.log('Failed to verify session token:', error);\n    return null;\n  }\n}\n\nexport async function createSession(payload: SessionPayload) {\n  const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 days\n  const session = await encrypt({ ...payload, expires });\n\n  // @Security: Set cookies with HttpOnly, Secure (in prod), SameSite, and Path attributes.\n  // @BestPractice: The `cookies()` function from `next/headers` is asynchronous.\n  const cookieStore = await cookies();\n  cookieStore.set('session', session, {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    expires: expires,\n    sameSite: 'lax',\n    path: '/',\n  });\n}\n\nexport async function getSession(): Promise<SessionPayload | null> {\n  // @BestPractice: `cookies()` must be awaited to get the cookie store.\n  const cookieStore = await cookies();\n  const sessionCookie = cookieStore.get('session')?.value;\n\n  if (!sessionCookie) return null;\n\n  const session = await decrypt(sessionCookie);\n  \n  return session;\n}\n\nexport async function deleteSession() {\n  // @Security: To log out, invalidate the cookie by setting an expiry date in the past.\n  const cookieStore = await cookies();\n  cookieStore.set('session', '', { expires: new Date(0), path: '/' });\n}\n"
        },
        {
          "name": "utils.ts",
          "type": "file",
          "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"
        }
      ]
    },
    {
      "name": "middleware.ts",
      "type": "file",
      "content": "import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { decrypt } from '@/lib/session';\n\nexport async function middleware(request: NextRequest) {\n  const path = request.nextUrl.pathname;\n\n  // @BestPractice: Define which routes are protected.\n  // This helps centralize the routing logic. The create-property page is a\n  // protected part of the registration flow.\n  const isProtectedRoute = \n    path.startsWith('/dashboard') ||\n    path.startsWith('/register/create-property');\n\n  // @BestPractice: Define public routes that authenticated users should be\n  // redirected away from (e.g., login, register).\n  const isPublicAuthRoute = \n    path === '/login' ||\n    path === '/register' ||\n    path === '/forgot-password';\n\n  // @Security: In middleware, read the cookie directly from the request object.\n  // The `decrypt` function is safe to use here.\n  const sessionCookie = request.cookies.get('session')?.value;\n  const session = sessionCookie ? await decrypt(sessionCookie) : null;\n\n  // Redirect logic\n  if (isProtectedRoute && !session?.userId) {\n    // @Security: If user is not authenticated and tries to access a protected route,\n    // redirect them to the login page.\n    return NextResponse.redirect(new URL('/login', request.nextUrl));\n  }\n\n  if (session?.userId && isPublicAuthRoute) {\n     // @Security: If an authenticated user tries to access public auth pages like login/register,\n     // redirect them to the dashboard. They should log out first.\n    return NextResponse.redirect(new URL('/dashboard', request.nextUrl));\n  }\n\n  return NextResponse.next();\n}\n\n// @BestPractice: The matcher configures which paths the middleware runs on.\n// This regex excludes static files and API routes, improving performance.\nexport const config = {\n  matcher: [\n    '/((?!api|_next/static|_next/image|favicon.ico).*)',\n  ],\n};\n"
    },
    {
      "name": "prisma",
      "type": "directory",
      "children": [
        {
          "name": "exportardatos.ts",
          "type": "file",
          "content": "import { PrismaClient } from '@prisma/client';\nimport fs from 'fs';\nimport path from 'path';\n\nconst prisma = new PrismaClient();\n\nasync function main() {\n  console.log('Iniciando la exportaci\u00f3n de datos...');\n\n  try {\n    const allData = {\n        users: await prisma.user.findMany(),\n        families: await prisma.family.findMany(),\n        playerProfiles: await prisma.playerProfile.findMany(),\n        playerResources: await prisma.playerResources.findMany(),\n        properties: await prisma.propiedad.findMany(),\n        buildings: await prisma.building.findMany(),\n        trainings: await prisma.training.findMany(),\n        playerTrainings: await prisma.playerTraining.findMany(),\n        recruitments: await prisma.recruitment.findMany(),\n        playerRecruitments: await prisma.playerRecruitment.findMany(),\n    };\n    \n    // JSON.stringify no soporta BigInt, as\u00ed que lo convertimos a string.\n    const jsonString = JSON.stringify(allData, (key, value) => {\n        return typeof value === 'bigint' ? value.toString() : value;\n    }, 2); // El '2' es para formatear el JSON con indentaci\u00f3n.\n\n    const outputPath = path.join(process.cwd(), 'prisma', 'database_export.json');\n    fs.writeFileSync(outputPath, jsonString, 'utf-8');\n\n    console.log(`Datos exportados exitosamente a ${outputPath}`);\n\n  } catch (error) {\n    console.error('Error durante la exportaci\u00f3n de datos:', error);\n    process.exit(1);\n  } finally {\n    await prisma.$disconnect();\n    console.log('Desconectado de la base de datos.');\n  }\n}\n\nmain();\n"
        }
      ]
    }
  ]
}