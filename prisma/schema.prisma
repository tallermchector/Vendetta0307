datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

model User {
  id_usuario     Int      @id @default(autoincrement())
  usuario        String   @unique
  email          String   @unique
  pass           String
  idioma         String
  fecha_registro DateTime @default(now())
  id_familia     Int?
  familia        Family?  @relation(fields: [id_familia], references: [id_familia])

  perfil      PlayerProfile?
  recursos    PlayerResources?
  propiedades Propiedad[]
}

model Family {
  id_familia  Int      @id @default(autoincrement())
  nombre      String   @unique
  tag         String   @unique
  emblema_url String?
  miembros    User[]
}

model PlayerProfile {
  id_perfil            Int      @id @default(autoincrement())
  id_usuario           Int      @unique
  usuario              User     @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
  puntos_edificios     Int
  puntos_tropas        Int
  puntos_entrenamiento Int
  ranking_global       Int
  lealtad              Int
  trainings            PlayerTraining[]
  recruitments         PlayerRecruitment[]
}

model PlayerResources {
  id_recursos          Int      @id @default(autoincrement())
  id_usuario           Int      @unique
  usuario              User     @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
  armas                BigInt
  municion             BigInt
  alcohol              BigInt
  dolares              BigInt
  ultima_actualizacion DateTime @updatedAt
}

model Propiedad {
  id_propiedad Int    @id @default(autoincrement())
  id_usuario   Int
  usuario      User   @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
  nombre       String
  coord_x      Int
  coord_y      Int
  coord_z      Int
  oficina      Int    @default(0)
  escuela      Int    @default(0)
  armeria      Int    @default(0)
  municion     Int    @default(0)
  cerveceria   Int    @default(0)
  taberna      Int    @default(0)
  contrabando  Int    @default(0)
  almacenArm   Int    @default(0)
  deposito     Int    @default(0)
  almacenAlc   Int    @default(0)
  caja         Int    @default(0)
  campo        Int    @default(0)
  seguridad    Int    @default(0)
  torreta      Int    @default(0)
  minas        Int    @default(0)

  @@unique([coord_x, coord_y, coord_z])
}

model Building {
  id_edificio Int    @id
  nombre      String
  descripcion String @db.Text
  costo_base  Json
  c_armas     Int
  c_municion  Int
  c_alcohol   Int
  c_dolares   Int
  fac_costo   Float
  t_horas     String
  t_minutos   String
  t_segundos  String
  fac_dura    Float
  imagen_url  String
}

model Training {
  id_training Int    @id
  nombre      String
  descripcion String @db.Text
  costo_base  Json
  c_armas     Int
  c_municion  Int
  c_alcohol   Int
  c_dolares   Int
  fac_costo   Float
  t_horas     String
  t_minutos   String
  t_segundos  String
  fac_dura    Float
  imagen_url  String

  players PlayerTraining[]
}

model PlayerTraining {
  id_player_training Int     @id @default(autoincrement())
  id_perfil          Int
  id_training        Int
  level              Int     @default(0)
  perfil             PlayerProfile @relation(fields: [id_perfil], references: [id_perfil], onDelete: Cascade)
  training           Training      @relation(fields: [id_training], references: [id_training], onDelete: Cascade)

  @@unique([id_perfil, id_training])
}

// @New: Catalog of all possible units that can be recruited in the game.
model Recruitment {
  id_recruitment   Int    @id
  nombre           String
  descripcion      String @db.Text
  c_armas          Int
  c_municion       Int
  c_alcohol        Int
  c_dolares        Int
  velocidad        Int
  t_horas          String
  t_minutos        String
  t_segundos       String
  fac_dura         Float
  puntos_por_nivel Int
  imagen_url       String
  ata              Int
  def              Int
  car              Int
  vel              Int
  punt             Int

  players PlayerRecruitment[]
}

// @New: Join table to track how many units of each type a player has recruited.
model PlayerRecruitment {
  id_player_recruitment Int @id @default(autoincrement())
  id_perfil             Int
  id_recruitment        Int
  quantity              Int @default(0)

  perfil      PlayerProfile @relation(fields: [id_perfil], references: [id_perfil], onDelete: Cascade)
  recruitment Recruitment   @relation(fields: [id_recruitment], references: [id_recruitment], onDelete: Cascade)

  @@unique([id_perfil, id_recruitment])
}
