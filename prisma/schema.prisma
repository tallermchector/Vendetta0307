// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum RoleInFamily {
  Leader
  CoLeader
  Member
}

model User {
  id_usuario       Int                @id @default(autoincrement())
  usuario          String             @unique
  email            String             @unique
  pass             String
  idioma           String
  fecha_registro   DateTime           @default(now())
  id_familia       Int?
  roleInFamily     RoleInFamily?
  familia          Family?            @relation(fields: [id_familia], references: [id_familia])
  perfil           PlayerProfile?
  recursos         PlayerResources?
  propiedades      Propiedad[]
  invitaciones     FamilyInvitation[] @relation("UserInvitations")
}

model Family {
  id_familia   Int                @id @default(autoincrement())
  nombre       String             @unique
  tag          String             @unique
  emblema_url  String?
  miembros     User[]
  invitaciones FamilyInvitation[] @relation("FamilyInvitations")
}

model FamilyInvitation {
  id_invitation       Int      @id @default(autoincrement())
  id_familia          Int
  familia             Family   @relation("FamilyInvitations", fields: [id_familia], references: [id_familia], onDelete: Cascade)
  id_usuario_invitado Int
  usuario_invitado    User     @relation("UserInvitations", fields: [id_usuario_invitado], references: [id_usuario], onDelete: Cascade)
  fecha_invitacion    DateTime @default(now())

  @@unique([id_familia, id_usuario_invitado])
}

model PlayerProfile {
  id_perfil            Int                 @id @default(autoincrement())
  id_usuario           Int                 @unique
  usuario              User                @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
  puntos_edificios     BigInt
  puntos_tropas        BigInt
  puntos_entrenamiento BigInt
  ranking_global       Int
  lealtad              Int
  trainings            PlayerTraining[]
  recruitments         PlayerRecruitment[]
  securities           PlayerSecurity[]
}

model PlayerResources {
  id_recursos          Int      @id @default(autoincrement())
  id_usuario           Int      @unique
  usuario              User     @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
  armas                BigInt
  municion             BigInt
  alcohol              BigInt
  dolares              BigInt
  ultima_actualizacion DateTime @updatedAt
}

model Propiedad {
  id_propiedad Int    @id @default(autoincrement())
  id_usuario   Int
  usuario      User   @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade)
  nombre       String
  coord_x      Int
  coord_y      Int
  coord_z      Int
  oficina      Int    @default(0)
  escuela      Int    @default(0)
  armeria      Int    @default(0)
  municion     Int    @default(0)
  cerveceria   Int    @default(0)
  taberna      Int    @default(0)
  contrabando  Int    @default(0)
  almacenArm   Int    @default(0)
  deposito     Int    @default(0)
  almacenAlc   Int    @default(0)
  caja         Int    @default(0)
  campo        Int    @default(0)
  seguridad    Int    @default(0)
  torreta      Int    @default(0)
  minas        Int    @default(0)

  @@unique([coord_x, coord_y, coord_z])
}

model Building {
  id_edificio Int    @id
  nombre      String
  descripcion String
  costo_base  Json
  c_armas     Int
  c_municion  Int
  c_alcohol   Int
  c_dolares   Int
  fac_costo   Float
  t_horas     String
  t_minutos   String
  t_segundos  String
  fac_dura    Float
  imagen_url  String
}

model Training {
  id_training     Int              @id
  nombre          String
  descripcion     String
  costo_base      Json
  c_armas         Int
  c_municion      Int
  c_alcohol       Int
  c_dolares       Int
  fac_costo       Float
  t_horas         String
  t_minutos       String
  t_segundos      String
  fac_dura        Float
  imagen_url      String
  playerTrainings PlayerTraining[]
}

model Recruitment {
  id_recruitment     Int                 @id
  nombre             String
  descripcion        String
  c_armas            Int
  c_municion         Int
  c_alcohol          Int
  c_dolares          Int
  velocidad          BigInt
  t_horas            String
  t_minutos          String
  t_segundos         String
  fac_dura           Float
  puntos_por_nivel   Int
  imagen_url         String
  ata                BigInt
  def                BigInt
  car                BigInt
  vel                BigInt
  punt               BigInt
  playerRecruitments PlayerRecruitment[]
}

model Security {
  id_security      Int              @id
  nombre           String
  descripcion      String
  c_armas          Int
  c_municion       Int
  c_alcohol        Int
  c_dolares        Int
  t_horas          String
  t_minutos        String
  t_segundos       String
  fac_dura           Float
  puntos_por_nivel   Int
  imagen_url         String
  ata                BigInt
  def                BigInt
  car                BigInt
  vel                BigInt
  punt               BigInt
  playerSecurities PlayerSecurity[]
}

model PlayerTraining {
  id_player_training Int           @id @default(autoincrement())
  id_perfil          Int
  id_training        Int
  perfil             PlayerProfile @relation(fields: [id_perfil], references: [id_perfil], onDelete: Cascade)
  training           Training      @relation(fields: [id_training], references: [id_training], onDelete: Cascade)
  level              Int           @default(0)

  @@unique([id_perfil, id_training])
}

model PlayerRecruitment {
  id_player_recruitment Int           @id @default(autoincrement())
  id_perfil             Int
  id_recruitment        Int
  perfil                PlayerProfile @relation(fields: [id_perfil], references: [id_perfil], onDelete: Cascade)
  recruitment           Recruitment   @relation(fields: [id_recruitment], references: [id_recruitment], onDelete: Cascade)
  quantity              Int           @default(0)

  @@unique([id_perfil, id_recruitment])
}

model PlayerSecurity {
  id_player_security Int           @id @default(autoincrement())
  id_perfil          Int
  id_security        Int
  perfil             PlayerProfile @relation(fields: [id_perfil], references: [id_perfil], onDelete: Cascade)
  security           Security      @relation(fields: [id_security], references: [id_security], onDelete: Cascade)
  quantity           Int           @default(0)

  @@unique([id_perfil, id_security])
}
